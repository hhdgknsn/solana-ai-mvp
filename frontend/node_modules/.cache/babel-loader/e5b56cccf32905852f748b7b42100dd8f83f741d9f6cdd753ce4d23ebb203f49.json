{"ast":null,"code":"import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nconst errorMessages = {\n  error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n  error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n  error003: nodeType => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n  error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n  error005: () => 'Only child nodes can use a parent extent.',\n  error006: () => \"Can't create edge. An edge needs a source and a target.\",\n  error007: id => `The old edge with id=${id} does not exist.`,\n  error009: type => `Marker type \"${type}\" doesn't exist.`,\n  error008: (handleType, {\n    id,\n    sourceHandle,\n    targetHandle\n  }) => `Couldn't create edge for ${handleType} handle id: \"${!sourceHandle ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n  error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n  error011: edgeType => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n  error012: id => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n  error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`\n};\nconst infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n  SelectionMode[\"Partial\"] = \"partial\";\n  SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n  inProgress: false,\n  isValid: null,\n  from: null,\n  fromHandle: null,\n  fromPosition: null,\n  fromNode: null,\n  to: null,\n  toHandle: null,\n  toPosition: null,\n  toNode: null\n};\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n  [Position.Left]: Position.Right,\n  [Position.Right]: Position.Left,\n  [Position.Top]: Position.Bottom,\n  [Position.Bottom]: Position.Top\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.size !== b.size) {\n    return false;\n  }\n  if (!a.size && !b.size) {\n    return true;\n  }\n  for (const key of a.keys()) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n  if (!cb) {\n    return;\n  }\n  const diff = [];\n  a.forEach((connection, key) => {\n    if (!b?.has(key)) {\n      diff.push(connection);\n    }\n  });\n  if (diff.length) {\n    cb(diff);\n  }\n}\nfunction getConnectionStatus(isValid) {\n  return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is useable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = element => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is useable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = element => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = element => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * Pass in a node, and get connected nodes where edge.source === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the source is the given node\n */\nconst getOutgoers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const outgoerIds = new Set();\n  edges.forEach(edge => {\n    if (edge.source === node.id) {\n      outgoerIds.add(edge.target);\n    }\n  });\n  return nodes.filter(n => outgoerIds.has(n.id));\n};\n/**\n * Pass in a node, and get connected nodes where edge.target === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the target is the given node\n */\nconst getIncomers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const incomersIds = new Set();\n  edges.forEach(edge => {\n    if (edge.target === node.id) {\n      incomersIds.add(edge.source);\n    }\n  });\n  return nodes.filter(n => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n  const {\n    width,\n    height\n  } = getNodeDimensions(node);\n  const origin = node.origin ?? nodeOrigin;\n  const offsetX = width * origin[0];\n  const offsetY = height * origin[1];\n  return {\n    x: node.position.x - offsetX,\n    y: node.position.y - offsetY\n  };\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\n * @returns Bounding box enclosing all nodes\n */\nconst getNodesBounds = (nodes, params = {\n  nodeOrigin: [0, 0]\n}) => {\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const box = nodes.reduce((currBox, node) => {\n    const nodeBox = nodeToBox(node, params.nodeOrigin);\n    return getBoundsOfBoxes(currBox, nodeBox);\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n  if (nodeLookup.size === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  let box = {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  };\n  nodeLookup.forEach(node => {\n    if (params.filter === undefined || params.filter(node)) {\n      const nodeBox = nodeToBox(node);\n      box = getBoundsOfBoxes(box, nodeBox);\n    }\n  });\n  return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false,\n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n  const paneRect = {\n    ...pointToRendererPoint(rect, [tx, ty, tScale]),\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  };\n  const visibleNodes = [];\n  for (const [, node] of nodes) {\n    const {\n      measured,\n      selectable = true,\n      hidden = false\n    } = node;\n    const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n    const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n    if (excludeNonSelectableNodes && !selectable || hidden) {\n      continue;\n    }\n    const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n    const notInitialized = width === null || height === null;\n    const partiallyVisible = partially && overlappingArea > 0;\n    const area = (width ?? 0) * (height ?? 0);\n    const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;\n    if (isVisible || node.dragging) {\n      visibleNodes.push(node);\n    }\n  }\n  return visibleNodes;\n};\n/**\n * Get all connecting edges for a given set of nodes\n * @param nodes - Nodes you want to get the connected edges for\n * @param edges - All edges\n * @returns Array of edges that connect any of the given nodes with each other\n */\nconst getConnectedEdges = (nodes, edges) => {\n  const nodeIds = new Set();\n  nodes.forEach(node => {\n    nodeIds.add(node.id);\n  });\n  return edges.filter(edge => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n  const fitViewNodes = new Map();\n  const optionNodeIds = options?.nodes ? new Set(options.nodes.map(node => node.id)) : null;\n  nodeLookup.forEach(n => {\n    const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n    if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n      fitViewNodes.set(n.id, n);\n    }\n  });\n  return fitViewNodes;\n}\nasync function fitView({\n  nodes,\n  width,\n  height,\n  panZoom,\n  minZoom,\n  maxZoom\n}, options) {\n  if (nodes.size === 0) {\n    return Promise.resolve(false);\n  }\n  const bounds = getInternalNodesBounds(nodes);\n  const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n  await panZoom.setViewport(viewport, {\n    duration: options?.duration\n  });\n  return Promise.resolve(true);\n}\n/**\n * This function clamps the passed extend by the node's width and height.\n * This is needed to prevent the node from being dragged outside of its extent.\n *\n * @param node\n * @param extent\n * @returns\n */\nfunction clampNodeExtent(node, extent) {\n  if (!extent || extent === 'parent') {\n    return extent;\n  }\n  return [extent[0], [extent[1][0] - (node.measured?.width ?? 0), extent[1][1] - (node.measured?.height ?? 0)]];\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({\n  nodeId,\n  nextPosition,\n  nodeLookup,\n  nodeOrigin = [0, 0],\n  nodeExtent,\n  onError\n}) {\n  const node = nodeLookup.get(nodeId);\n  const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode ? parentNode.internals.positionAbsolute : {\n    x: 0,\n    y: 0\n  };\n  const origin = node.origin ?? nodeOrigin;\n  let currentExtent = clampNodeExtent(node, node.extent || nodeExtent);\n  if (node.extent === 'parent' && !node.expandParent) {\n    if (!parentNode) {\n      onError?.('005', errorMessages['error005']());\n    } else {\n      const nodeWidth = node.measured.width;\n      const nodeHeight = node.measured.height;\n      const parentWidth = parentNode.measured.width;\n      const parentHeight = parentNode.measured.height;\n      if (nodeWidth && nodeHeight && parentWidth && parentHeight) {\n        currentExtent = [[parentX, parentY], [parentX + parentWidth - nodeWidth, parentY + parentHeight - nodeHeight]];\n      }\n    }\n  } else if (parentNode && isCoordinateExtent(node.extent)) {\n    currentExtent = [[node.extent[0][0] + parentX, node.extent[0][1] + parentY], [node.extent[1][0] + parentX, node.extent[1][1] + parentY]];\n  }\n  const positionAbsolute = isCoordinateExtent(currentExtent) ? clampPosition(nextPosition, currentExtent) : nextPosition;\n  return {\n    position: {\n      // TODO: is there a better way to do this?\n      x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n      y: positionAbsolute.y - parentY + node.measured.height * origin[1]\n    },\n    positionAbsolute\n  };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({\n  nodesToRemove = [],\n  edgesToRemove = [],\n  nodes,\n  edges,\n  onBeforeDelete\n}) {\n  const nodeIds = new Set(nodesToRemove.map(node => node.id));\n  const matchingNodes = [];\n  for (const node of nodes) {\n    if (node.deletable === false) {\n      continue;\n    }\n    const isIncluded = nodeIds.has(node.id);\n    const parentHit = !isIncluded && node.parentId && matchingNodes.find(n => n.id === node.parentId);\n    if (isIncluded || parentHit) {\n      matchingNodes.push(node);\n    }\n  }\n  const edgeIds = new Set(edgesToRemove.map(edge => edge.id));\n  const deletableEdges = edges.filter(edge => edge.deletable !== false);\n  const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n  const matchingEdges = connectedEdges;\n  for (const edge of deletableEdges) {\n    const isIncluded = edgeIds.has(edge.id);\n    if (isIncluded && !matchingEdges.find(e => e.id === edge.id)) {\n      matchingEdges.push(edge);\n    }\n  }\n  if (!onBeforeDelete) {\n    return {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    };\n  }\n  const onBeforeDeleteResult = await onBeforeDelete({\n    nodes: matchingNodes,\n    edges: matchingEdges\n  });\n  if (typeof onBeforeDeleteResult === 'boolean') {\n    return onBeforeDeleteResult ? {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    } : {\n      edges: [],\n      nodes: []\n    };\n  }\n  return onBeforeDeleteResult;\n}\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = {\n  x: 0,\n  y: 0\n}, extent) => ({\n  x: clamp(position.x, extent[0][0], extent[1][0]),\n  y: clamp(position.y, extent[0][1], extent[1][1])\n});\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n  if (value < min) {\n    return clamp(Math.abs(value - min), 1, min) / min;\n  } else if (value > max) {\n    return -clamp(Math.abs(value - max), 1, min) / min;\n  }\n  return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n  const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n  const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n  return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2)\n});\nconst rectToBox = ({\n  x,\n  y,\n  width,\n  height\n}) => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height\n});\nconst boxToRect = ({\n  x,\n  y,\n  x2,\n  y2\n}) => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n    y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0)\n  };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n  const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n  const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n  return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = n => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n  }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n  return {\n    x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n    y: snapGrid[1] * Math.round(position.y / snapGrid[1])\n  };\n};\nconst pointToRendererPoint = ({\n  x,\n  y\n}, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n  const position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({\n  x,\n  y\n}, [tx, ty, tScale]) => {\n  return {\n    x: x * tScale + tx,\n    y: y * tScale + ty\n  };\n};\n/**\n * Returns a viewport that encloses the given bounds with optional padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport\n * @param width - Width of the viewport\n * @param height  - Height of the viewport\n * @param minZoom - Minimum zoom level of the resulting viewport\n * @param maxZoom - Maximum zoom level of the resulting viewport\n * @param padding - Optional padding around the bounds\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n  { x: 0, y: 0, width: 100, height: 100},\n  1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n  const xZoom = width / (bounds.width * (1 + padding));\n  const yZoom = height / (bounds.height * (1 + padding));\n  const zoom = Math.min(xZoom, yZoom);\n  const clampedZoom = clamp(zoom, minZoom, maxZoom);\n  const boundsCenterX = bounds.x + bounds.width / 2;\n  const boundsCenterY = bounds.y + bounds.height / 2;\n  const x = width / 2 - boundsCenterX * clampedZoom;\n  const y = height / 2 - boundsCenterY * clampedZoom;\n  return {\n    x,\n    y,\n    zoom: clampedZoom\n  };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n  return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n  return {\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n}\nfunction nodeHasDimensions(node) {\n  return (node.measured?.width ?? node.width ?? node.initialWidth) !== undefined && (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined;\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = {\n  width: 0,\n  height: 0\n}, parentId, nodeLookup, nodeOrigin) {\n  let nextParentId = parentId;\n  const positionAbsolute = {\n    ...position\n  };\n  while (nextParentId) {\n    const parent = nodeLookup.get(nextParentId);\n    nextParentId = parent?.parentId;\n    if (parent) {\n      const origin = parent.origin || nodeOrigin;\n      positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n      positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n    }\n  }\n  return positionAbsolute;\n}\nfunction getPointerPosition(event, {\n  snapGrid = [0, 0],\n  snapToGrid = false,\n  transform\n}) {\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const pointerPos = pointToRendererPoint({\n    x,\n    y\n  }, transform);\n  const {\n    x: xSnapped,\n    y: ySnapped\n  } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n  // we need the snapped position in order to be able to skip unnecessary drag events\n  return {\n    xSnapped,\n    ySnapped,\n    ...pointerPos\n  };\n}\nconst getDimensions = node => ({\n  width: node.offsetWidth,\n  height: node.offsetHeight\n});\nconst getHostForElement = element => element.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n  // using composed path for handling shadow dom\n  const target = event.composedPath?.()?.[0] || event.target;\n  const isInput = inputTags.includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n  // when an input field is focused we don't want to trigger deletion or movement of nodes\n  return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = event => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n  const isMouse = isMouseEvent(event);\n  const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n  const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n  return {\n    x: evtX - (bounds?.left ?? 0),\n    y: evtY - (bounds?.top ?? 0)\n  };\n};\n// The handle bounds are calculated relative to the node element.\n// We store them in the internals object of the node in order to avoid\n// unnecessary recalculations.\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n  const handles = nodeElement.querySelectorAll(`.${type}`);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  return Array.from(handles).map(handle => {\n    const handleBounds = handle.getBoundingClientRect();\n    return {\n      id: handle.getAttribute('data-handleid'),\n      type,\n      nodeId,\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left) / zoom,\n      y: (handleBounds.top - nodeBounds.top) / zoom,\n      ...getDimensions(handle)\n    };\n  });\n};\nfunction getBezierEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourceControlX,\n  sourceControlY,\n  targetControlX,\n  targetControlY\n}) {\n  // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n  // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n  const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  const offsetX = Math.abs(centerX - sourceX);\n  const offsetY = Math.abs(centerY - sourceY);\n  return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  }\n  return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({\n  pos,\n  x1,\n  y1,\n  x2,\n  y2,\n  c\n}) {\n  switch (pos) {\n    case Position.Left:\n      return [x1 - calculateControlOffset(x1 - x2, c), y1];\n    case Position.Right:\n      return [x1 + calculateControlOffset(x2 - x1, c), y1];\n    case Position.Top:\n      return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n    case Position.Bottom:\n      return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n  }\n}\n/**\n * Get a bezier path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @param params.curvature - The curvature of the bezier edge\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n});\n */\nfunction getBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  curvature = 0.25\n}) {\n  const [sourceControlX, sourceControlY] = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  });\n  const [targetControlX, targetControlY] = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({\n  sourceNode,\n  targetNode,\n  selected = false,\n  zIndex = 0,\n  elevateOnSelect = false\n}) {\n  if (!elevateOnSelect) {\n    return zIndex;\n  }\n  const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n  const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n  return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({\n  sourceNode,\n  targetNode,\n  width,\n  height,\n  transform\n}) {\n  const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n  const viewRect = {\n    x: -transform[0] / transform[2],\n    y: -transform[1] / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  };\n  return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({\n  source,\n  sourceHandle,\n  target,\n  targetHandle\n}) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n  return edges.some(el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges\n * @remarks It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an Edge or a Connection you want to add\n * @param edges -  The array of all current edges\n * @returns A new array of edges with the new edge added\n */\nconst addEdge = (edgeParams, edges) => {\n  if (!edgeParams.source || !edgeParams.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  let edge;\n  if (isEdgeBase(edgeParams)) {\n    edge = {\n      ...edgeParams\n    };\n  } else {\n    edge = {\n      ...edgeParams,\n      id: getEdgeId(edgeParams)\n    };\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  if (edge.sourceHandle === null) {\n    delete edge.sourceHandle;\n  }\n  if (edge.targetHandle === null) {\n    delete edge.targetHandle;\n  }\n  return edges.concat(edge);\n};\n/**\n * A handy utility to reconnect an existing edge with new properties\n * @param oldEdge - The edge you want to update\n * @param newConnection - The new connection you want to update the edge with\n * @param edges - The array of all current edges\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\n * @returns the updated edges array\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = {\n  shouldReplaceId: true\n}) => {\n  const {\n    id: oldEdgeId,\n    ...rest\n  } = oldEdge;\n  if (!newConnection.source || !newConnection.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  const foundEdge = edges.find(e => e.id === oldEdge.id);\n  if (!foundEdge) {\n    devWarn('007', errorMessages['error007'](oldEdgeId));\n    return edges;\n  }\n  // Remove old edge and create the new edge with parameters of old edge.\n  const edge = {\n    ...rest,\n    id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  };\n  return edges.filter(e => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Get a straight path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getStraightPath({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst handleDirections = {\n  [Position.Left]: {\n    x: -1,\n    y: 0\n  },\n  [Position.Right]: {\n    x: 1,\n    y: 0\n  },\n  [Position.Top]: {\n    x: 0,\n    y: -1\n  },\n  [Position.Bottom]: {\n    x: 0,\n    y: 1\n  }\n};\nconst getDirection = ({\n  source,\n  sourcePosition = Position.Bottom,\n  target\n}) => {\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? {\n      x: 1,\n      y: 0\n    } : {\n      x: -1,\n      y: 0\n    };\n  }\n  return source.y < target.y ? {\n    x: 0,\n    y: 1\n  } : {\n    x: 0,\n    y: -1\n  };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n  targetPosition = Position.Top,\n  center,\n  offset\n}) {\n  const sourceDir = handleDirections[sourcePosition];\n  const targetDir = handleDirections[targetPosition];\n  const sourceGapped = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset\n  };\n  const targetGapped = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n  let points = [];\n  let centerX, centerY;\n  const sourceGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const targetGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y\n  });\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = center.x ?? defaultCenterX;\n    centerY = center.y ?? defaultCenterY;\n    //    --->\n    //    |\n    // >---\n    const verticalSplit = [{\n      x: centerX,\n      y: sourceGapped.y\n    }, {\n      x: centerX,\n      y: targetGapped.y\n    }];\n    //    |\n    //  ---\n    //  |\n    const horizontalSplit = [{\n      x: sourceGapped.x,\n      y: centerY\n    }, {\n      x: targetGapped.x,\n      y: centerY\n    }];\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget = [{\n      x: sourceGapped.x,\n      y: targetGapped.y\n    }];\n    const targetSource = [{\n      x: targetGapped.x,\n      y: sourceGapped.y\n    }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y\n    };\n    const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n    const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n  const pathPoints = [source, {\n    x: sourceGapped.x + sourceGapOffset.x,\n    y: sourceGapped.y + sourceGapOffset.y\n  }, ...points, {\n    x: targetGapped.x + targetGapOffset.x,\n    y: targetGapped.y + targetGapOffset.y\n  }, target];\n  return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const {\n    x,\n    y\n  } = b;\n  // no bend\n  if (a.x === x && x === c.x || a.y === y && y === c.y) {\n    return `L${x} ${y}`;\n  }\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * Get a smooth step path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getSmoothStepPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  borderRadius = 5,\n  centerX,\n  centerY,\n  offset = 20\n}) {\n  const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n    source: {\n      x: sourceX,\n      y: sourceY\n    },\n    sourcePosition,\n    target: {\n      x: targetX,\n      y: targetY\n    },\n    targetPosition,\n    center: {\n      x: centerX,\n      y: centerY\n    },\n    offset\n  });\n  const path = points.reduce((res, p, i) => {\n    let segment = '';\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n    res += segment;\n    return res;\n  }, '');\n  return [path, labelX, labelY, offsetX, offsetY];\n}\nfunction isNodeInitialized(node) {\n  return node && !!(node.internals.handleBounds || node.handles?.length) && !!(node.measured.width || node.width || node.initialWidth);\n}\nfunction getEdgePosition(params) {\n  const {\n    sourceNode,\n    targetNode\n  } = params;\n  if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n    return null;\n  }\n  const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n  const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n  const sourceHandle = getHandle(sourceHandleBounds?.source ?? [], params.sourceHandle);\n  const targetHandle = getHandle(\n  // when connection type is loose we can define all handles as sources and connect source -> source\n  params.connectionMode === ConnectionMode.Strict ? targetHandleBounds?.target ?? [] : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n  if (!sourceHandle || !targetHandle) {\n    params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n      id: params.id,\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle\n    }));\n    return null;\n  }\n  const sourcePosition = sourceHandle?.position || Position.Bottom;\n  const targetPosition = targetHandle?.position || Position.Top;\n  const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n  const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n  return {\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y,\n    sourcePosition,\n    targetPosition\n  };\n}\nfunction toHandleBounds(handles) {\n  if (!handles) {\n    return null;\n  }\n  const source = [];\n  const target = [];\n  for (const handle of handles) {\n    handle.width = handle.width ?? 1;\n    handle.height = handle.height ?? 1;\n    if (handle.type === 'source') {\n      source.push(handle);\n    } else if (handle.type === 'target') {\n      target.push(handle);\n    }\n  }\n  return {\n    source,\n    target\n  };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n  const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n  const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n  const {\n    width,\n    height\n  } = handle ?? getNodeDimensions(node);\n  if (center) {\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n  const position = handle?.position ?? fallbackPosition;\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y\n      };\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n    case Position.Left:\n      return {\n        x,\n        y: y + height / 2\n      };\n  }\n}\nfunction getHandle(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  }\n  // if no handleId is given, we use the first handle, otherwise we check for the id\n  return (!handleId ? bounds[0] : bounds.find(d => d.id === handleId)) || null;\n}\nfunction getMarkerId(marker, id) {\n  if (!marker) {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  const idPrefix = id ? `${id}__` : '';\n  return `${idPrefix}${Object.keys(marker).sort().map(key => `${key}=${marker[key]}`).join('&')}`;\n}\nfunction createMarkerIds(edges, {\n  id,\n  defaultColor,\n  defaultMarkerStart,\n  defaultMarkerEnd\n}) {\n  const ids = new Set();\n  return edges.reduce((markers, edge) => {\n    [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach(marker => {\n      if (marker && typeof marker === 'object') {\n        const markerId = getMarkerId(marker, id);\n        if (!ids.has(markerId)) {\n          markers.push({\n            id: markerId,\n            color: marker.color || defaultColor,\n            ...marker\n          });\n          ids.add(markerId);\n        }\n      }\n    });\n    return markers;\n  }, []).sort((a, b) => a.id.localeCompare(b.id));\n}\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n  let alignmentOffset = 0.5;\n  if (align === 'start') {\n    alignmentOffset = 0;\n  } else if (align === 'end') {\n    alignmentOffset = 1;\n  }\n  // position === Position.Top\n  // we set the x any y position of the toolbar based on the nodes position\n  let pos = [(nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x, nodeRect.y * viewport.zoom + viewport.y - offset];\n  // and than shift it based on the alignment. The shift values are in %.\n  let shift = [-100 * alignmentOffset, -100];\n  switch (position) {\n    case Position.Right:\n      pos = [(nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [0, -100 * alignmentOffset];\n      break;\n    case Position.Bottom:\n      pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n      shift[1] = 0;\n      break;\n    case Position.Left:\n      pos = [nodeRect.x * viewport.zoom + viewport.x - offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [-100, -100 * alignmentOffset];\n      break;\n  }\n  return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\nconst defaultOptions = {\n  nodeOrigin: [0, 0],\n  elevateNodesOnSelect: true,\n  defaults: {}\n};\nconst adoptUserNodesDefaultOptions = {\n  ...defaultOptions,\n  checkEquality: true\n};\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n  const _options = {\n    ...defaultOptions,\n    ...options\n  };\n  for (const node of nodeLookup.values()) {\n    if (!node.parentId) {\n      continue;\n    }\n    updateChildPosition(node, nodeLookup, parentLookup, _options);\n  }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n  const _options = {\n    ...adoptUserNodesDefaultOptions,\n    ...options\n  };\n  const tmpLookup = new Map(nodeLookup);\n  nodeLookup.clear();\n  parentLookup.clear();\n  const selectedNodeZ = options?.elevateNodesOnSelect ? 1000 : 0;\n  for (const userNode of nodes) {\n    let internalNode = tmpLookup.get(userNode.id);\n    if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n      nodeLookup.set(userNode.id, internalNode);\n    } else {\n      internalNode = {\n        ..._options.defaults,\n        ...userNode,\n        measured: {\n          width: userNode.measured?.width,\n          height: userNode.measured?.height\n        },\n        internals: {\n          positionAbsolute: getNodePositionWithOrigin(userNode, _options.nodeOrigin),\n          // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n          handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n          z: calculateZ(userNode, selectedNodeZ),\n          userNode\n        }\n      };\n      nodeLookup.set(userNode.id, internalNode);\n    }\n    if (userNode.parentId) {\n      updateChildPosition(internalNode, nodeLookup, parentLookup, options);\n    }\n  }\n}\nfunction updateChildPosition(node, nodeLookup, parentLookup, options) {\n  const _options = {\n    ...defaultOptions,\n    ...options\n  };\n  const parentId = node.parentId;\n  const parentNode = nodeLookup.get(parentId);\n  if (!parentNode) {\n    console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n    return;\n  }\n  // update the parentLookup\n  const childNodes = parentLookup.get(parentId);\n  if (childNodes) {\n    childNodes.set(node.id, node);\n  } else {\n    parentLookup.set(parentId, new Map([[node.id, node]]));\n  }\n  const selectedNodeZ = options?.elevateNodesOnSelect ? 1000 : 0;\n  const {\n    x,\n    y,\n    z\n  } = calculateChildXYZ(node, parentNode, _options.nodeOrigin, selectedNodeZ);\n  const currPosition = node.internals.positionAbsolute;\n  const positionChanged = x !== currPosition.x || y !== currPosition.y;\n  if (positionChanged || z !== node.internals.z) {\n    node.internals = {\n      ...node.internals,\n      positionAbsolute: positionChanged ? {\n        x,\n        y\n      } : currPosition,\n      z\n    };\n  }\n}\nfunction calculateZ(node, selectedNodeZ) {\n  return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, selectedNodeZ) {\n  const position = getNodePositionWithOrigin(childNode, nodeOrigin);\n  const childZ = calculateZ(childNode, selectedNodeZ);\n  const parentZ = parentNode.internals.z ?? 0;\n  return {\n    x: parentNode.internals.positionAbsolute.x + position.x,\n    y: parentNode.internals.positionAbsolute.y + position.y,\n    z: parentZ > childZ ? parentZ : childZ\n  };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n  const changes = [];\n  const parentExpansions = new Map();\n  // determine the expanded rectangle the child nodes would take for each parent\n  for (const child of children) {\n    const parent = nodeLookup.get(child.parentId);\n    if (!parent) {\n      continue;\n    }\n    const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n    const expandedRect = getBoundsOfRects(parentRect, child.rect);\n    parentExpansions.set(child.parentId, {\n      expandedRect,\n      parent\n    });\n  }\n  if (parentExpansions.size > 0) {\n    parentExpansions.forEach(({\n      expandedRect,\n      parent\n    }, parentId) => {\n      // determine the position & dimensions of the parent\n      const positionAbsolute = parent.internals.positionAbsolute;\n      const dimensions = getNodeDimensions(parent);\n      const origin = parent.origin ?? nodeOrigin;\n      // determine how much the parent expands in width and position\n      const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n      const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n      const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n      const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n      const widthChange = (newWidth - dimensions.width) * origin[0];\n      const heightChange = (newHeight - dimensions.height) * origin[1];\n      // We need to correct the position of the parent node if the origin is not [0,0]\n      if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n        changes.push({\n          id: parentId,\n          type: 'position',\n          position: {\n            x: parent.position.x - xChange + widthChange,\n            y: parent.position.y - yChange + heightChange\n          }\n        });\n        // We move all child nodes in the oppsite direction\n        // so the x,y changes of the parent do not move the children\n        parentLookup.get(parentId)?.forEach(childNode => {\n          if (!children.some(child => child.id === childNode.id)) {\n            changes.push({\n              id: childNode.id,\n              type: 'position',\n              position: {\n                x: childNode.position.x + xChange,\n                y: childNode.position.y + yChange\n              }\n            });\n          }\n        });\n      }\n      // We need to correct the dimensions of the parent node if the origin is not [0,0]\n      if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n        changes.push({\n          id: parentId,\n          type: 'dimensions',\n          setAttributes: true,\n          dimensions: {\n            width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n            height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0)\n          }\n        });\n      }\n    });\n  }\n  return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin) {\n  const viewportNode = domNode?.querySelector('.xyflow__viewport');\n  let updatedInternals = false;\n  if (!viewportNode) {\n    return {\n      changes: [],\n      updatedInternals\n    };\n  }\n  const changes = [];\n  const style = window.getComputedStyle(viewportNode);\n  const {\n    m22: zoom\n  } = new window.DOMMatrixReadOnly(style.transform);\n  // in this array we collect nodes, that might trigger changes (like expanding parent)\n  const parentExpandChildren = [];\n  for (const update of updates.values()) {\n    const node = nodeLookup.get(update.id);\n    if (!node) {\n      continue;\n    }\n    if (node.hidden) {\n      node.internals = {\n        ...node.internals,\n        handleBounds: undefined\n      };\n      updatedInternals = true;\n    } else {\n      const dimensions = getDimensions(update.nodeElement);\n      const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n      const doUpdate = !!(dimensions.width && dimensions.height && (dimensionChanged || !node.internals.handleBounds || update.force));\n      if (doUpdate) {\n        const nodeBounds = update.nodeElement.getBoundingClientRect();\n        node.measured = dimensions;\n        node.internals = {\n          ...node.internals,\n          positionAbsolute: getNodePositionWithOrigin(node, nodeOrigin),\n          handleBounds: {\n            source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n            target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id)\n          }\n        };\n        if (node.parentId) {\n          updateChildPosition(node, nodeLookup, parentLookup, {\n            nodeOrigin\n          });\n        }\n        updatedInternals = true;\n        if (dimensionChanged) {\n          changes.push({\n            id: node.id,\n            type: 'dimensions',\n            dimensions\n          });\n          if (node.expandParent && node.parentId) {\n            parentExpandChildren.push({\n              id: node.id,\n              parentId: node.parentId,\n              rect: nodeToRect(node, nodeOrigin)\n            });\n          }\n        }\n      }\n    }\n  }\n  if (parentExpandChildren.length > 0) {\n    const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n    changes.push(...parentExpandChanges);\n  }\n  return {\n    changes,\n    updatedInternals\n  };\n}\nasync function panBy({\n  delta,\n  panZoom,\n  transform,\n  translateExtent,\n  width,\n  height\n}) {\n  if (!panZoom || !delta.x && !delta.y) {\n    return Promise.resolve(false);\n  }\n  const nextViewport = await panZoom.setViewportConstrained({\n    x: transform[0] + delta.x,\n    y: transform[1] + delta.y,\n    zoom: transform[2]\n  }, [[0, 0], [width, height]], translateExtent);\n  const transformChanged = !!nextViewport && (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n  return Promise.resolve(transformChanged);\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n  connectionLookup.clear();\n  edgeLookup.clear();\n  for (const edge of edges) {\n    const {\n      source,\n      target,\n      sourceHandle = null,\n      targetHandle = null\n    } = edge;\n    const sourceKey = `${source}-source-${sourceHandle}`;\n    const targetKey = `${target}-target-${targetHandle}`;\n    const prevSource = connectionLookup.get(sourceKey) || new Map();\n    const prevTarget = connectionLookup.get(targetKey) || new Map();\n    const connection = {\n      edgeId: edge.id,\n      source,\n      target,\n      sourceHandle,\n      targetHandle\n    };\n    edgeLookup.set(edge.id, edge);\n    connectionLookup.set(sourceKey, prevSource.set(`${target}-${targetHandle}`, connection));\n    connectionLookup.set(targetKey, prevTarget.set(`${source}-${sourceHandle}`, connection));\n  }\n}\nfunction shallowNodeData(a, b) {\n  if (a === null || b === null) {\n    return false;\n  }\n  const _a = Array.isArray(a) ? a : [a];\n  const _b = Array.isArray(b) ? b : [b];\n  if (_a.length !== _b.length) {\n    return false;\n  }\n  for (let i = 0; i < _a.length; i++) {\n    if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isParentSelected(node, nodeLookup) {\n  if (!node.parentId) {\n    return false;\n  }\n  const parentNode = nodeLookup.get(node.parentId);\n  if (!parentNode) {\n    return false;\n  }\n  if (parentNode.selected) {\n    return true;\n  }\n  return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n  let current = target;\n  do {\n    if (current?.matches(selector)) return true;\n    if (current === domNode) return false;\n    current = current.parentElement;\n  } while (current);\n  return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n  const dragItems = new Map();\n  for (const [id, node] of nodeLookup) {\n    if ((node.selected || node.id === nodeId) && (!node.parentId || !isParentSelected(node, nodeLookup)) && (node.draggable || nodesDraggable && typeof node.draggable === 'undefined')) {\n      const internalNode = nodeLookup.get(id);\n      if (internalNode) {\n        dragItems.set(id, {\n          id,\n          position: internalNode.position || {\n            x: 0,\n            y: 0\n          },\n          distance: {\n            x: mousePos.x - internalNode.internals.positionAbsolute.x,\n            y: mousePos.y - internalNode.internals.positionAbsolute.y\n          },\n          extent: internalNode.extent,\n          parentId: internalNode.parentId,\n          origin: internalNode.origin,\n          expandParent: internalNode.expandParent,\n          internals: {\n            positionAbsolute: internalNode.internals.positionAbsolute || {\n              x: 0,\n              y: 0\n            }\n          },\n          measured: {\n            width: internalNode.measured.width ?? 0,\n            height: internalNode.measured.height ?? 0\n          }\n        });\n      }\n    }\n  }\n  return dragItems;\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({\n  nodeId,\n  dragItems,\n  nodeLookup,\n  dragging = true\n}) {\n  const nodesFromDragItems = [];\n  for (const [id, dragItem] of dragItems) {\n    const node = nodeLookup.get(id)?.internals.userNode;\n    if (node) {\n      nodesFromDragItems.push({\n        ...node,\n        position: dragItem.position,\n        dragging\n      });\n    }\n  }\n  if (!nodeId) {\n    return [nodesFromDragItems[0], nodesFromDragItems];\n  }\n  const node = nodeLookup.get(nodeId).internals.userNode;\n  return [{\n    ...node,\n    position: dragItems.get(nodeId)?.position || node.position,\n    dragging\n  }, nodesFromDragItems];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({\n  onNodeMouseDown,\n  getStoreItems,\n  onDragStart,\n  onDrag,\n  onDragStop\n}) {\n  let lastPos = {\n    x: null,\n    y: null\n  };\n  let autoPanId = 0;\n  let dragItems = new Map();\n  let autoPanStarted = false;\n  let mousePosition = {\n    x: 0,\n    y: 0\n  };\n  let containerBounds = null;\n  let dragStarted = false;\n  let d3Selection = null;\n  let abortDrag = false; // prevents unintentional dragging on multitouch\n  // public functions\n  function update({\n    noDragClassName,\n    handleSelector,\n    domNode,\n    isSelectable,\n    nodeId,\n    nodeClickDistance = 0\n  }) {\n    d3Selection = select(domNode);\n    function updateNodes({\n      x,\n      y\n    }, dragEvent) {\n      const {\n        nodeLookup,\n        nodeExtent,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        onNodeDrag,\n        onSelectionDrag,\n        onError,\n        updateNodePositions\n      } = getStoreItems();\n      lastPos = {\n        x,\n        y\n      };\n      let hasChange = false;\n      let nodesBox = {\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 0\n      };\n      if (dragItems.size > 1 && nodeExtent) {\n        const rect = getInternalNodesBounds(dragItems);\n        nodesBox = rectToBox(rect);\n      }\n      for (const [id, dragItem] of dragItems) {\n        let nextPosition = {\n          x: x - dragItem.distance.x,\n          y: y - dragItem.distance.y\n        };\n        if (snapToGrid) {\n          nextPosition = snapPosition(nextPosition, snapGrid);\n        }\n        // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n        // based on its position so that the node stays at it's position relative to the selection.\n        let adjustedNodeExtent = [[nodeExtent[0][0], nodeExtent[0][1]], [nodeExtent[1][0], nodeExtent[1][1]]];\n        if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n          const {\n            positionAbsolute\n          } = dragItem.internals;\n          const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n          const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n          const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n          const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n          adjustedNodeExtent = [[x1, y1], [x2, y2]];\n        }\n        const {\n          position,\n          positionAbsolute\n        } = calculateNodePosition({\n          nodeId: id,\n          nextPosition,\n          nodeLookup,\n          nodeExtent: adjustedNodeExtent,\n          nodeOrigin,\n          onError\n        });\n        // we want to make sure that we only fire a change event when there is a change\n        hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n        dragItem.position = position;\n        dragItem.internals.positionAbsolute = positionAbsolute;\n      }\n      if (!hasChange) {\n        return;\n      }\n      updateNodePositions(dragItems, true);\n      if (dragEvent && (onDrag || onNodeDrag || !nodeId && onSelectionDrag)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n        onNodeDrag?.(dragEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDrag?.(dragEvent, currentNodes);\n        }\n      }\n    }\n    async function autoPan() {\n      if (!containerBounds) {\n        return;\n      }\n      const {\n        transform,\n        panBy,\n        autoPanSpeed\n      } = getStoreItems();\n      const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n      if (xMovement !== 0 || yMovement !== 0) {\n        lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n        lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n        if (await panBy({\n          x: xMovement,\n          y: yMovement\n        })) {\n          updateNodes(lastPos, null);\n        }\n      }\n      autoPanId = requestAnimationFrame(autoPan);\n    }\n    function startDrag(event) {\n      const {\n        nodeLookup,\n        multiSelectionActive,\n        nodesDraggable,\n        transform,\n        snapGrid,\n        snapToGrid,\n        selectNodesOnDrag,\n        onNodeDragStart,\n        onSelectionDragStart,\n        unselectNodesAndEdges\n      } = getStoreItems();\n      dragStarted = true;\n      if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n        if (!nodeLookup.get(nodeId)?.selected) {\n          // we need to reset selected nodes when selectNodesOnDrag=false\n          unselectNodesAndEdges();\n        }\n      }\n      if (isSelectable && selectNodesOnDrag && nodeId) {\n        onNodeMouseDown?.(nodeId);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      lastPos = pointerPos;\n      dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n      if (dragItems.size > 0 && (onDragStart || onNodeDragStart || !nodeId && onSelectionDragStart)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n        onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDragStart?.(event.sourceEvent, currentNodes);\n        }\n      }\n    }\n    const d3DragInstance = drag().clickDistance(nodeClickDistance).on('start', event => {\n      const {\n        domNode,\n        nodeDragThreshold,\n        transform,\n        snapGrid,\n        snapToGrid\n      } = getStoreItems();\n      abortDrag = false;\n      if (nodeDragThreshold === 0) {\n        startDrag(event);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      lastPos = pointerPos;\n      containerBounds = domNode?.getBoundingClientRect() || null;\n      mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n    }).on('drag', event => {\n      const {\n        autoPanOnNodeDrag,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeDragThreshold\n      } = getStoreItems();\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      if (event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1) {\n        abortDrag = true;\n      }\n      if (abortDrag) {\n        return;\n      }\n      if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n        autoPanStarted = true;\n        autoPan();\n      }\n      if (!dragStarted) {\n        const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n        const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance > nodeDragThreshold) {\n          startDrag(event);\n        }\n      }\n      // skip events without movement\n      if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n        // dragEvent = event.sourceEvent as MouseEvent;\n        mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        updateNodes(pointerPos, event.sourceEvent);\n      }\n    }).on('end', event => {\n      if (!dragStarted || abortDrag) {\n        return;\n      }\n      autoPanStarted = false;\n      dragStarted = false;\n      cancelAnimationFrame(autoPanId);\n      if (dragItems.size > 0) {\n        const {\n          nodeLookup,\n          updateNodePositions,\n          onNodeDragStop,\n          onSelectionDragStop\n        } = getStoreItems();\n        updateNodePositions(dragItems, false);\n        if (onDragStop || onNodeDragStop || !nodeId && onSelectionDragStop) {\n          const [currentNode, currentNodes] = getEventHandlerParams({\n            nodeId,\n            dragItems,\n            nodeLookup,\n            dragging: false\n          });\n          onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n          onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n          if (!nodeId) {\n            onSelectionDragStop?.(event.sourceEvent, currentNodes);\n          }\n        }\n      }\n    }).filter(event => {\n      const target = event.target;\n      const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) && (!handleSelector || hasSelector(target, handleSelector, domNode));\n      return isDraggable;\n    });\n    d3Selection.call(d3DragInstance);\n  }\n  function destroy() {\n    d3Selection?.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\n\n// this functions collects all handles and adds an absolute position\n// so that we can later find the closest handle to the mouse position\nfunction getHandles(node, handleBounds, type, currentHandle) {\n  let excludedHandle = null;\n  const handles = (handleBounds[type] || []).reduce((res, handle) => {\n    if (node.id === currentHandle.nodeId && type === currentHandle.handleType && handle.id === currentHandle.handleId) {\n      excludedHandle = handle;\n    } else {\n      const handleXY = getHandlePosition(node, handle, handle.position, true);\n      res.push({\n        ...handle,\n        ...handleXY\n      });\n    }\n    return res;\n  }, []);\n  return [handles, excludedHandle];\n}\nfunction getClosestHandle(pos, connectionRadius, handleLookup) {\n  let closestHandles = [];\n  let minDistance = Infinity;\n  for (const handle of handleLookup.values()) {\n    const distance = Math.sqrt(Math.pow(handle.x - pos.x, 2) + Math.pow(handle.y - pos.y, 2));\n    if (distance <= connectionRadius) {\n      if (distance < minDistance) {\n        closestHandles = [handle];\n      } else if (distance === minDistance) {\n        // when multiple handles are on the same distance we collect all of them\n        closestHandles.push(handle);\n      }\n      minDistance = distance;\n    }\n  }\n  if (!closestHandles.length) {\n    return null;\n  }\n  return closestHandles.length === 1 ? closestHandles[0] :\n  // if multiple handles are layouted on top of each other we take the one with type = target because it's more likely that the user wants to connect to this one\n  closestHandles.find(handle => handle.type === 'target') || closestHandles[0];\n}\nfunction getHandleLookup({\n  nodeLookup,\n  nodeId,\n  handleId,\n  handleType\n}) {\n  const connectionHandles = new Map();\n  const currentHandle = {\n    nodeId,\n    handleId,\n    handleType\n  };\n  let matchingHandle = null;\n  for (const node of nodeLookup.values()) {\n    if (node.internals.handleBounds) {\n      const [sourceHandles, excludedSource] = getHandles(node, node.internals.handleBounds, 'source', currentHandle);\n      const [targetHandles, excludedTarget] = getHandles(node, node.internals.handleBounds, 'target', currentHandle);\n      matchingHandle = matchingHandle ? matchingHandle : excludedSource ?? excludedTarget;\n      [...sourceHandles, ...targetHandles].forEach(handle => connectionHandles.set(`${handle.nodeId}-${handle.type}-${handle.id}`, handle));\n    }\n  }\n  // if the user only works with handles that are type=\"source\" + connectionMode=\"loose\"\n  // it happens that we can't find a matching handle. The reason for this is, that the\n  // edge don't know about the handles and always assumes that there is source and a target.\n  // In this case we need to find the matching handle by switching the handleType\n  if (!matchingHandle) {\n    const node = nodeLookup.get(nodeId);\n    if (node?.internals.handleBounds) {\n      currentHandle.handleType = handleType === 'source' ? 'target' : 'source';\n      const [, excluded] = getHandles(node, node.internals.handleBounds, currentHandle.handleType, currentHandle);\n      matchingHandle = excluded;\n    }\n  }\n  return [connectionHandles, matchingHandle];\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n  if (edgeUpdaterType) {\n    return edgeUpdaterType;\n  } else if (handleDomNode?.classList.contains('target')) {\n    return 'target';\n  } else if (handleDomNode?.classList.contains('source')) {\n    return 'source';\n  }\n  return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n  let isValid = null;\n  if (isHandleValid) {\n    isValid = true;\n  } else if (isInsideConnectionRadius && !isHandleValid) {\n    isValid = false;\n  }\n  return isValid;\n}\nconst alwaysValid = () => true;\nfunction onPointerDown(event, {\n  connectionMode,\n  connectionRadius,\n  handleId,\n  nodeId,\n  edgeUpdaterType,\n  isTarget,\n  domNode,\n  nodeLookup,\n  lib,\n  autoPanOnConnect,\n  flowId,\n  panBy,\n  cancelConnection,\n  onConnectStart,\n  onConnect,\n  onConnectEnd,\n  isValidConnection = alwaysValid,\n  onReconnectEnd,\n  updateConnection,\n  getTransform,\n  getFromHandle,\n  autoPanSpeed\n}) {\n  // when xyflow is used inside a shadow root we can't use document\n  const doc = getHostForElement(event.target);\n  let autoPanId = 0;\n  let closestHandle;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const clickedHandle = doc?.elementFromPoint(x, y);\n  const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n  const containerBounds = domNode?.getBoundingClientRect();\n  if (!containerBounds || !handleType) {\n    return;\n  }\n  let position = getEventPosition(event, containerBounds);\n  let autoPanStarted = false;\n  let connection = null;\n  let isValid = false;\n  let handleDomNode = null;\n  const [handleLookup, fromHandleInternal] = getHandleLookup({\n    nodeLookup,\n    nodeId,\n    handleId,\n    handleType\n  });\n  // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n  function autoPan() {\n    if (!autoPanOnConnect || !containerBounds) {\n      return;\n    }\n    const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n    panBy({\n      x,\n      y\n    });\n    autoPanId = requestAnimationFrame(autoPan);\n  }\n  // Stays the same for all consecutive pointermove events\n  const fromHandle = {\n    ...fromHandleInternal,\n    nodeId,\n    type: handleType,\n    position: fromHandleInternal.position\n  };\n  const fromNodeInternal = nodeLookup.get(nodeId);\n  const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n  const newConnection = {\n    inProgress: true,\n    isValid: null,\n    from,\n    fromHandle,\n    fromPosition: fromHandle.position,\n    fromNode: fromNodeInternal,\n    to: position,\n    toHandle: null,\n    toPosition: oppositePosition[fromHandle.position],\n    toNode: null\n  };\n  updateConnection(newConnection);\n  let previousConnection = newConnection;\n  onConnectStart?.(event, {\n    nodeId,\n    handleId,\n    handleType\n  });\n  function onPointerMove(event) {\n    if (!getFromHandle() || !fromHandle) {\n      onPointerUp(event);\n      return;\n    }\n    const transform = getTransform();\n    position = getEventPosition(event, containerBounds);\n    closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, handleLookup);\n    if (!autoPanStarted) {\n      autoPan();\n      autoPanStarted = true;\n    }\n    const result = isValidHandle(event, {\n      handle: closestHandle,\n      connectionMode,\n      fromNodeId: nodeId,\n      fromHandleId: handleId,\n      fromType: isTarget ? 'target' : 'source',\n      isValidConnection,\n      doc,\n      lib,\n      flowId,\n      handleLookup\n    });\n    handleDomNode = result.handleDomNode;\n    connection = result.connection;\n    isValid = isConnectionValid(!!closestHandle, result.isValid);\n    const newConnection = {\n      // from stays the same\n      ...previousConnection,\n      isValid,\n      to: closestHandle && isValid ? rendererPointToPoint({\n        x: closestHandle.x,\n        y: closestHandle.y\n      }, transform) : position,\n      toHandle: result.toHandle,\n      toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n      toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null\n    };\n    // we don't want to trigger an update when the connection\n    // is snapped to the same handle as before\n    if (isValid && closestHandle && previousConnection.toHandle && newConnection.toHandle && previousConnection.toHandle.type === newConnection.toHandle.type && previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId && previousConnection.toHandle.id === newConnection.toHandle.id) {\n      return;\n    }\n    updateConnection(newConnection);\n    previousConnection = newConnection;\n  }\n  function onPointerUp(event) {\n    if ((closestHandle || handleDomNode) && connection && isValid) {\n      onConnect?.(connection);\n    }\n    // it's important to get a fresh reference from the store here\n    // in order to get the latest state of onConnectEnd\n    onConnectEnd?.(event);\n    if (edgeUpdaterType) {\n      onReconnectEnd?.(event);\n    }\n    cancelConnection();\n    cancelAnimationFrame(autoPanId);\n    autoPanStarted = false;\n    isValid = false;\n    connection = null;\n    handleDomNode = null;\n    doc.removeEventListener('mousemove', onPointerMove);\n    doc.removeEventListener('mouseup', onPointerUp);\n    doc.removeEventListener('touchmove', onPointerMove);\n    doc.removeEventListener('touchend', onPointerUp);\n  }\n  doc.addEventListener('mousemove', onPointerMove);\n  doc.addEventListener('mouseup', onPointerUp);\n  doc.addEventListener('touchmove', onPointerMove);\n  doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, {\n  handle,\n  connectionMode,\n  fromNodeId,\n  fromHandleId,\n  fromType,\n  doc,\n  lib,\n  flowId,\n  isValidConnection = alwaysValid,\n  handleLookup\n}) {\n  const isTarget = fromType === 'target';\n  const handleDomNode = handle ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`) : null;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const handleBelow = doc.elementFromPoint(x, y);\n  // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n  // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n  const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n  const result = {\n    handleDomNode: handleToCheck,\n    isValid: false,\n    connection: null,\n    toHandle: null\n  };\n  if (handleToCheck) {\n    const handleType = getHandleType(undefined, handleToCheck);\n    const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n    const handleId = handleToCheck.getAttribute('data-handleid');\n    const connectable = handleToCheck.classList.contains('connectable');\n    const connectableEnd = handleToCheck.classList.contains('connectableend');\n    if (!handleNodeId) {\n      return result;\n    }\n    const connection = {\n      source: isTarget ? handleNodeId : fromNodeId,\n      sourceHandle: isTarget ? handleId : fromHandleId,\n      target: isTarget ? fromNodeId : handleNodeId,\n      targetHandle: isTarget ? fromHandleId : handleId\n    };\n    result.connection = connection;\n    const isConnectable = connectable && connectableEnd;\n    // in strict mode we don't allow target to target or source to source connections\n    const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === 'source' || !isTarget && handleType === 'target' : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n    result.isValid = isValid && isValidConnection(connection);\n    const toHandle = handleLookup?.get(`${handleNodeId}-${handleType}-${handleId}`);\n    if (toHandle) {\n      result.toHandle = {\n        ...toHandle\n      };\n    }\n  }\n  return result;\n}\nconst XYHandle = {\n  onPointerDown,\n  isValid: isValidHandle\n};\nfunction XYMinimap({\n  domNode,\n  panZoom,\n  getTransform,\n  getViewScale\n}) {\n  const selection = select(domNode);\n  function update({\n    translateExtent,\n    width,\n    height,\n    zoomStep = 10,\n    pannable = true,\n    zoomable = true,\n    inversePan = false\n  }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const zoomHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n        return;\n      }\n      const pinchDelta = -event.sourceEvent.deltaY * (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) * zoomStep;\n      const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n      panZoom.scaleTo(nextZoom);\n    };\n    let panStart = [0, 0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panStartHandler = event => {\n      if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n        panStart = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove' || !panZoom) {\n        return;\n      }\n      const panCurrent = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n      panStart = panCurrent;\n      const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n      const position = {\n        x: transform[0] - panDelta[0] * moveScale,\n        y: transform[1] - panDelta[1] * moveScale\n      };\n      const extent = [[0, 0], [width, height]];\n      panZoom.setViewportConstrained({\n        x: position.x,\n        y: position.y,\n        zoom: transform[2]\n      }, extent, translateExtent);\n    };\n    const zoomAndPanHandler = zoom().on('start', panStartHandler)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom', pannable ? panHandler : null)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom.wheel', zoomable ? zoomHandler : null);\n    selection.call(zoomAndPanHandler, {});\n  }\n  function destroy() {\n    selection.on('zoom', null);\n  }\n  return {\n    update,\n    destroy,\n    pointer\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = transform => ({\n  x: transform.x,\n  y: transform.y,\n  zoom: transform.k\n});\nconst viewportToTransform = ({\n  x,\n  y,\n  zoom\n}) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => {}) => {\n  const hasDuration = typeof duration === 'number' && duration > 0;\n  if (!hasDuration) {\n    onEnd();\n  }\n  return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = event => {\n  const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nfunction createPanOnScrollHandler({\n  zoomPanValues,\n  noWheelClassName,\n  d3Selection,\n  d3Zoom,\n  panOnScrollMode,\n  panOnScrollSpeed,\n  zoomOnPinch,\n  onPanZoomStart,\n  onPanZoom,\n  onPanZoomEnd\n}) {\n  return event => {\n    if (isWrappedWithClass(event, noWheelClassName)) {\n      return false;\n    }\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    const currentZoom = d3Selection.property('__zoom').k || 1;\n    // macos sets ctrlKey=true for pinch gesture on a trackpad\n    if (event.ctrlKey && zoomOnPinch) {\n      const point = pointer(event);\n      const pinchDelta = wheelDelta(event);\n      const zoom = currentZoom * Math.pow(2, pinchDelta);\n      // @ts-ignore\n      d3Zoom.scaleTo(d3Selection, zoom, point, event);\n      return;\n    }\n    // increase scroll speed in firefox\n    // firefox: deltaMode === 1; chrome: deltaMode === 0\n    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n    // this enables vertical scrolling with shift + scroll on windows\n    if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n      deltaX = event.deltaY * deltaNormalize;\n      deltaY = 0;\n    }\n    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed,\n    // @ts-ignore\n    {\n      internal: true\n    });\n    const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n    clearTimeout(zoomPanValues.panScrollTimeout);\n    // for pan on scroll we need to handle the event calls on our own\n    // we can't use the start, zoom and end events from d3-zoom\n    // because start and move gets called on every scroll event and not once at the beginning\n    if (!zoomPanValues.isPanScrolling) {\n      zoomPanValues.isPanScrolling = true;\n      onPanZoomStart?.(event, nextViewport);\n    }\n    if (zoomPanValues.isPanScrolling) {\n      onPanZoom?.(event, nextViewport);\n      zoomPanValues.panScrollTimeout = setTimeout(() => {\n        onPanZoomEnd?.(event, nextViewport);\n        zoomPanValues.isPanScrolling = false;\n      }, 150);\n    }\n  };\n}\nfunction createZoomOnScrollHandler({\n  noWheelClassName,\n  preventScrolling,\n  d3ZoomHandler\n}) {\n  return function (event, d) {\n    // we still want to enable pinch zooming even if preventScrolling is set to false\n    const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n    if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n      return null;\n    }\n    event.preventDefault();\n    d3ZoomHandler.call(this, event, d);\n  };\n}\nfunction createPanZoomStartHandler({\n  zoomPanValues,\n  onDraggingChange,\n  onPanZoomStart\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    const viewport = transformToViewport(event.transform);\n    // we need to remember it here, because it's always 0 in the \"zoom\" event\n    zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n    zoomPanValues.isZoomingOrPanning = true;\n    zoomPanValues.prevViewport = viewport;\n    if (event.sourceEvent?.type === 'mousedown') {\n      onDraggingChange(true);\n    }\n    if (onPanZoomStart) {\n      onPanZoomStart?.(event.sourceEvent, viewport);\n    }\n  };\n}\nfunction createPanZoomHandler({\n  zoomPanValues,\n  panOnDrag,\n  onPaneContextMenu,\n  onTransformChange,\n  onPanZoom\n}) {\n  return event => {\n    zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n    if (!event.sourceEvent?.sync) {\n      onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n    }\n    if (onPanZoom && !event.sourceEvent?.internal) {\n      onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n    }\n  };\n}\nfunction createPanZoomEndHandler({\n  zoomPanValues,\n  panOnDrag,\n  panOnScroll,\n  onDraggingChange,\n  onPanZoomEnd,\n  onPaneContextMenu\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    zoomPanValues.isZoomingOrPanning = false;\n    if (onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) && !zoomPanValues.usedRightMouseButton && event.sourceEvent) {\n      onPaneContextMenu(event.sourceEvent);\n    }\n    zoomPanValues.usedRightMouseButton = false;\n    onDraggingChange(false);\n    if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n      const viewport = transformToViewport(event.transform);\n      zoomPanValues.prevViewport = viewport;\n      clearTimeout(zoomPanValues.timerId);\n      zoomPanValues.timerId = setTimeout(() => {\n        onPanZoomEnd?.(event.sourceEvent, viewport);\n      },\n      // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n      panOnScroll ? 150 : 0);\n    }\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({\n  zoomActivationKeyPressed,\n  zoomOnScroll,\n  zoomOnPinch,\n  panOnDrag,\n  panOnScroll,\n  zoomOnDoubleClick,\n  userSelectionActive,\n  noWheelClassName,\n  noPanClassName,\n  lib\n}) {\n  return event => {\n    const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n    const pinchZoom = zoomOnPinch && event.ctrlKey;\n    if (event.button === 1 && event.type === 'mousedown' && (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n      return true;\n    }\n    // if all interactions are disabled, we prevent all zoom events\n    if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n      return false;\n    }\n    // during a selection we prevent all other interactions\n    if (userSelectionActive) {\n      return false;\n    }\n    // if the target element is inside an element with the nowheel class, we prevent zooming\n    if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n      return false;\n    }\n    // if the target element is inside an element with the nopan class, we prevent panning\n    if (isWrappedWithClass(event, noPanClassName) && (event.type !== 'wheel' || panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed)) {\n      return false;\n    }\n    if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n      return false;\n    }\n    if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n      event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n      return false;\n    }\n    // when there is no scroll handling enabled, we prevent all wheel events\n    if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n      return false;\n    }\n    // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n    if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n      return false;\n    }\n    // if the pane is only movable using allowed clicks\n    if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n      return false;\n    }\n    // We only allow right clicks if pan on drag is set to right click\n    const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n    // default filter for d3-zoom\n    return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n  };\n}\nfunction XYPanZoom({\n  domNode,\n  minZoom,\n  maxZoom,\n  paneClickDistance,\n  translateExtent,\n  viewport,\n  onPanZoom,\n  onPanZoomStart,\n  onPanZoomEnd,\n  onTransformChange,\n  onDraggingChange\n}) {\n  const zoomPanValues = {\n    isZoomingOrPanning: false,\n    usedRightMouseButton: false,\n    prevViewport: {\n      x: 0,\n      y: 0,\n      zoom: 0\n    },\n    mouseButton: 0,\n    timerId: undefined,\n    panScrollTimeout: undefined,\n    isPanScrolling: false\n  };\n  const bbox = domNode.getBoundingClientRect();\n  const d3ZoomInstance = zoom().clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance).scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n  const d3Selection = select(domNode).call(d3ZoomInstance);\n  setViewportConstrained({\n    x: viewport.x,\n    y: viewport.y,\n    zoom: clamp(viewport.zoom, minZoom, maxZoom)\n  }, [[0, 0], [bbox.width, bbox.height]], translateExtent);\n  const d3ZoomHandler = d3Selection.on('wheel.zoom');\n  const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n  d3ZoomInstance.wheelDelta(wheelDelta);\n  function setTransform(transform, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  // public functions\n  function update({\n    noWheelClassName,\n    noPanClassName,\n    onPaneContextMenu,\n    userSelectionActive,\n    panOnScroll,\n    panOnDrag,\n    panOnScrollMode,\n    panOnScrollSpeed,\n    preventScrolling,\n    zoomOnPinch,\n    zoomOnScroll,\n    zoomOnDoubleClick,\n    zoomActivationKeyPressed,\n    lib\n  }) {\n    if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n      destroy();\n    }\n    const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n    const wheelHandler = isPanOnScroll ? createPanOnScrollHandler({\n      zoomPanValues,\n      noWheelClassName,\n      d3Selection,\n      d3Zoom: d3ZoomInstance,\n      panOnScrollMode,\n      panOnScrollSpeed,\n      zoomOnPinch,\n      onPanZoomStart,\n      onPanZoom,\n      onPanZoomEnd\n    }) : createZoomOnScrollHandler({\n      noWheelClassName,\n      preventScrolling,\n      d3ZoomHandler\n    });\n    d3Selection.on('wheel.zoom', wheelHandler, {\n      passive: false\n    });\n    if (!userSelectionActive) {\n      // pan zoom start\n      const startHandler = createPanZoomStartHandler({\n        zoomPanValues,\n        onDraggingChange,\n        onPanZoomStart\n      });\n      d3ZoomInstance.on('start', startHandler);\n      // pan zoom\n      const panZoomHandler = createPanZoomHandler({\n        zoomPanValues,\n        panOnDrag,\n        onPaneContextMenu: !!onPaneContextMenu,\n        onPanZoom,\n        onTransformChange\n      });\n      d3ZoomInstance.on('zoom', panZoomHandler);\n      // pan zoom end\n      const panZoomEndHandler = createPanZoomEndHandler({\n        zoomPanValues,\n        panOnDrag,\n        panOnScroll,\n        onPaneContextMenu,\n        onPanZoomEnd,\n        onDraggingChange\n      });\n      d3ZoomInstance.on('end', panZoomEndHandler);\n    }\n    const filter = createFilter({\n      zoomActivationKeyPressed,\n      panOnDrag,\n      zoomOnScroll,\n      panOnScroll,\n      zoomOnDoubleClick,\n      zoomOnPinch,\n      userSelectionActive,\n      noPanClassName,\n      noWheelClassName,\n      lib\n    });\n    d3ZoomInstance.filter(filter);\n    // We cannot add zoomOnDoubleClick to the filter above because\n    // double tapping on touch screens circumvents the filter and\n    // dblclick.zoom is fired on the selection directly\n    if (zoomOnDoubleClick) {\n      d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n    } else {\n      d3Selection.on('dblclick.zoom', null);\n    }\n  }\n  function destroy() {\n    d3ZoomInstance.on('zoom', null);\n  }\n  async function setViewportConstrained(viewport, extent, translateExtent) {\n    const nextTransform = viewportToTransform(viewport);\n    const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n    if (contrainedTransform) {\n      await setTransform(contrainedTransform);\n    }\n    return new Promise(resolve => resolve(contrainedTransform));\n  }\n  async function setViewport(viewport, options) {\n    const nextTransform = viewportToTransform(viewport);\n    await setTransform(nextTransform, options);\n    return new Promise(resolve => resolve(nextTransform));\n  }\n  function syncViewport(viewport) {\n    if (d3Selection) {\n      const nextTransform = viewportToTransform(viewport);\n      const currentTransform = d3Selection.property('__zoom');\n      if (currentTransform.k !== viewport.zoom || currentTransform.x !== viewport.x || currentTransform.y !== viewport.y) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        d3ZoomInstance?.transform(d3Selection, nextTransform, null, {\n          sync: true\n        });\n      }\n    }\n  }\n  function getViewport() {\n    const transform = d3Selection ? zoomTransform(d3Selection.node()) : {\n      x: 0,\n      y: 0,\n      k: 1\n    };\n    return {\n      x: transform.x,\n      y: transform.y,\n      zoom: transform.k\n    };\n  }\n  function scaleTo(zoom, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function scaleBy(factor, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function setScaleExtent(scaleExtent) {\n    d3ZoomInstance?.scaleExtent(scaleExtent);\n  }\n  function setTranslateExtent(translateExtent) {\n    d3ZoomInstance?.translateExtent(translateExtent);\n  }\n  function setClickDistance(distance) {\n    const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n    d3ZoomInstance?.clickDistance(validDistance);\n  }\n  return {\n    update,\n    destroy,\n    setViewport,\n    setViewportConstrained,\n    getViewport,\n    scaleTo,\n    scaleBy,\n    setScaleExtent,\n    setTranslateExtent,\n    syncViewport,\n    setClickDistance\n  };\n}\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n  ResizeControlVariant[\"Line\"] = \"line\";\n  ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({\n  width,\n  prevWidth,\n  height,\n  prevHeight,\n  affectsX,\n  affectsY\n}) {\n  const deltaWidth = width - prevWidth;\n  const deltaHeight = height - prevHeight;\n  const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n  if (deltaWidth && affectsX) {\n    direction[0] = direction[0] * -1;\n  }\n  if (deltaHeight && affectsY) {\n    direction[1] = direction[1] * -1;\n  }\n  return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n  const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n  const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n  const affectsX = controlPosition.includes('left');\n  const affectsY = controlPosition.includes('top');\n  return {\n    isHorizontal,\n    isVertical,\n    affectsX,\n    affectsY\n  };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n  return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n  return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n  return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n  return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n  let {\n    affectsX,\n    affectsY\n  } = controlDirection;\n  const {\n    isHorizontal,\n    isVertical\n  } = controlDirection;\n  const isDiagonal = isHorizontal && isVertical;\n  const {\n    xSnapped,\n    ySnapped\n  } = pointerPosition;\n  const {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  } = boundaries;\n  const {\n    x: startX,\n    y: startY,\n    width: startWidth,\n    height: startHeight,\n    aspectRatio\n  } = startValues;\n  let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n  let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n  const newWidth = startWidth + (affectsX ? -distX : distX);\n  const newHeight = startHeight + (affectsY ? -distY : distY);\n  const originOffsetX = -nodeOrigin[0] * startWidth;\n  const originOffsetY = -nodeOrigin[1] * startHeight;\n  // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n  let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n  let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n  // Check if extent is restricting the resize\n  if (extent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n    } else if (!affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n    }\n    if (affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n    } else if (!affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the child extent is restricting the resize\n  if (childExtent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n    } else if (!affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n    }\n    if (affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n    } else if (!affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the aspect ratio resizing of the other side is restricting the resize\n  if (keepAspectRatio) {\n    if (isHorizontal) {\n      // Check if the max dimensions might be restricting the resize\n      const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n      clampX = Math.max(clampX, aspectHeightClamp);\n      // Check if the extent is restricting the resize\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n      // Check if the child extent is restricting the resize\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n    }\n    // Do the same thing for vertical resizing\n    if (isVertical) {\n      const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n      clampY = Math.max(clampY, aspectWidthClamp);\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n    }\n  }\n  distY = distY + (distY < 0 ? clampY : -clampY);\n  distX = distX + (distX < 0 ? clampX : -clampX);\n  if (keepAspectRatio) {\n    if (isDiagonal) {\n      if (newWidth > newHeight * aspectRatio) {\n        distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n      } else {\n        distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n      }\n    } else {\n      if (isHorizontal) {\n        distY = distX / aspectRatio;\n        affectsY = affectsX;\n      } else {\n        distX = distY * aspectRatio;\n        affectsX = affectsY;\n      }\n    }\n  }\n  const x = affectsX ? startX + distX : startX;\n  const y = affectsY ? startY + distY : startY;\n  return {\n    width: startWidth + (affectsX ? -distX : distX),\n    height: startHeight + (affectsY ? -distY : distY),\n    x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n    y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y\n  };\n}\nconst initPrevValues = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0\n};\nconst initStartValues = {\n  ...initPrevValues,\n  pointerX: 0,\n  pointerY: 0,\n  aspectRatio: 1\n};\nfunction nodeToParentExtent(node) {\n  return [[0, 0], [node.measured.width, node.measured.height]];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n  const x = parent.position.x + child.position.x;\n  const y = parent.position.y + child.position.y;\n  const width = child.measured.width ?? 0;\n  const height = child.measured.height ?? 0;\n  const originOffsetX = nodeOrigin[0] * width;\n  const originOffsetY = nodeOrigin[1] * height;\n  return [[x - originOffsetX, y - originOffsetY], [x + width - originOffsetX, y + height - originOffsetY]];\n}\nfunction XYResizer({\n  domNode,\n  nodeId,\n  getStoreItems,\n  onChange,\n  onEnd\n}) {\n  const selection = select(domNode);\n  function update({\n    controlPosition,\n    boundaries,\n    keepAspectRatio,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    shouldResize\n  }) {\n    let prevValues = {\n      ...initPrevValues\n    };\n    let startValues = {\n      ...initStartValues\n    };\n    const controlDirection = getControlDirection(controlPosition);\n    let node = undefined;\n    let childNodes = [];\n    let parentNode = undefined; // Needed to fix expandParent\n    let parentExtent = undefined;\n    let childExtent = undefined;\n    const dragHandler = drag().on('start', event => {\n      const {\n        nodeLookup,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin\n      } = getStoreItems();\n      node = nodeLookup.get(nodeId);\n      if (!node) {\n        return;\n      }\n      const {\n        xSnapped,\n        ySnapped\n      } = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      prevValues = {\n        width: node.measured.width ?? 0,\n        height: node.measured.height ?? 0,\n        x: node.position.x ?? 0,\n        y: node.position.y ?? 0\n      };\n      startValues = {\n        ...prevValues,\n        pointerX: xSnapped,\n        pointerY: ySnapped,\n        aspectRatio: prevValues.width / prevValues.height\n      };\n      parentNode = undefined;\n      if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n        parentNode = nodeLookup.get(node.parentId);\n        parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n      }\n      // Collect all child nodes to correct their relative positions when top/left changes\n      // Determine largest minimal extent the parent node is allowed to resize to\n      childNodes = [];\n      childExtent = undefined;\n      for (const [childId, child] of nodeLookup) {\n        if (child.parentId === nodeId) {\n          childNodes.push({\n            id: childId,\n            position: {\n              ...child.position\n            },\n            extent: child.extent\n          });\n          if (child.extent === 'parent' || child.expandParent) {\n            const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n            if (childExtent) {\n              childExtent = [[Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])], [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])]];\n            } else {\n              childExtent = extent;\n            }\n          }\n        }\n      }\n      onResizeStart?.(event, {\n        ...prevValues\n      });\n    }).on('drag', event => {\n      const {\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin: storeNodeOrigin\n      } = getStoreItems();\n      const pointerPosition = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      const childChanges = [];\n      if (!node) {\n        return;\n      }\n      const {\n        x: prevX,\n        y: prevY,\n        width: prevWidth,\n        height: prevHeight\n      } = prevValues;\n      const change = {};\n      const nodeOrigin = node.origin ?? storeNodeOrigin;\n      const {\n        width,\n        height,\n        x,\n        y\n      } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n      const isWidthChange = width !== prevWidth;\n      const isHeightChange = height !== prevHeight;\n      const isXPosChange = x !== prevX && isWidthChange;\n      const isYPosChange = y !== prevY && isHeightChange;\n      if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n        return;\n      }\n      if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n        change.x = isXPosChange ? x : prevValues.x;\n        change.y = isYPosChange ? y : prevValues.y;\n        prevValues.x = change.x;\n        prevValues.y = change.y;\n        // when top/left changes, correct the relative positions of child nodes\n        // so that they stay in the same position\n        if (childNodes.length > 0) {\n          const xChange = x - prevX;\n          const yChange = y - prevY;\n          for (const childNode of childNodes) {\n            childNode.position = {\n              x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n              y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight)\n            };\n            childChanges.push(childNode);\n          }\n        }\n      }\n      if (isWidthChange || isHeightChange) {\n        change.width = isWidthChange ? width : prevValues.width;\n        change.height = isHeightChange ? height : prevValues.height;\n        prevValues.width = change.width;\n        prevValues.height = change.height;\n      }\n      // Fix expandParent when resizing from top/left\n      if (parentNode && node.expandParent) {\n        const xLimit = nodeOrigin[0] * (change.width ?? 0);\n        if (change.x && change.x < xLimit) {\n          prevValues.x = xLimit;\n          startValues.x = startValues.x - (change.x - xLimit);\n        }\n        const yLimit = nodeOrigin[1] * (change.height ?? 0);\n        if (change.y && change.y < yLimit) {\n          prevValues.y = yLimit;\n          startValues.y = startValues.y - (change.y - yLimit);\n        }\n      }\n      const direction = getResizeDirection({\n        width: prevValues.width,\n        prevWidth,\n        height: prevValues.height,\n        prevHeight,\n        affectsX: controlDirection.affectsX,\n        affectsY: controlDirection.affectsY\n      });\n      const nextValues = {\n        ...prevValues,\n        direction\n      };\n      const callResize = shouldResize?.(event, nextValues);\n      if (callResize === false) {\n        return;\n      }\n      onResize?.(event, nextValues);\n      onChange(change, childChanges);\n    }).on('end', event => {\n      onResizeEnd?.(event, {\n        ...prevValues\n      });\n      onEnd?.();\n    });\n    selection.call(dragHandler);\n  }\n  function destroy() {\n    selection.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };","map":{"version":3,"names":["drag","select","pointer","zoom","zoomIdentity","zoomTransform","errorMessages","error001","error002","error003","nodeType","error004","error005","error006","error007","id","error009","type","error008","handleType","sourceHandle","targetHandle","error010","error011","edgeType","error012","error013","lib","infiniteExtent","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","elementSelectionKeys","ConnectionMode","PanOnScrollMode","SelectionMode","initialConnection","inProgress","isValid","from","fromHandle","fromPosition","fromNode","to","toHandle","toPosition","toNode","ConnectionLineType","MarkerType","Position","oppositePosition","Left","Right","Top","Bottom","areConnectionMapsEqual","a","b","size","key","keys","has","handleConnectionChange","cb","diff","forEach","connection","push","length","getConnectionStatus","isEdgeBase","element","isNodeBase","isInternalNodeBase","getOutgoers","node","nodes","edges","outgoerIds","Set","edge","source","add","target","filter","n","getIncomers","incomersIds","getNodePositionWithOrigin","nodeOrigin","width","height","getNodeDimensions","origin","offsetX","offsetY","x","position","y","getNodesBounds","params","box","reduce","currBox","nodeBox","nodeToBox","getBoundsOfBoxes","Infinity","x2","y2","boxToRect","getInternalNodesBounds","nodeLookup","undefined","getNodesInside","rect","tx","ty","tScale","partially","excludeNonSelectableNodes","paneRect","pointToRendererPoint","visibleNodes","measured","selectable","hidden","initialWidth","initialHeight","overlappingArea","getOverlappingArea","nodeToRect","notInitialized","partiallyVisible","area","isVisible","dragging","getConnectedEdges","nodeIds","getFitViewNodes","options","fitViewNodes","Map","optionNodeIds","map","includeHiddenNodes","set","fitView","panZoom","minZoom","maxZoom","Promise","resolve","bounds","viewport","getViewportForBounds","padding","setViewport","duration","clampNodeExtent","extent","calculateNodePosition","nodeId","nextPosition","nodeExtent","onError","get","parentNode","parentId","parentX","parentY","internals","positionAbsolute","currentExtent","expandParent","nodeWidth","nodeHeight","parentWidth","parentHeight","isCoordinateExtent","clampPosition","getElementsToRemove","nodesToRemove","edgesToRemove","onBeforeDelete","matchingNodes","deletable","isIncluded","parentHit","find","edgeIds","deletableEdges","connectedEdges","matchingEdges","e","onBeforeDeleteResult","clamp","val","min","max","Math","calcAutoPanVelocity","value","abs","calcAutoPan","pos","speed","distance","xMovement","yMovement","box1","box2","rectToBox","getBoundsOfRects","rect1","rect2","rectA","rectB","xOverlap","yOverlap","ceil","isRectObject","obj","isNumeric","isNaN","isFinite","devWarn","message","process","env","NODE_ENV","console","warn","snapPosition","snapGrid","round","snapToGrid","rendererPointToPoint","xZoom","yZoom","clampedZoom","boundsCenterX","boundsCenterY","isMacOs","navigator","userAgent","indexOf","nodeHasDimensions","evaluateAbsolutePosition","dimensions","nextParentId","parent","getPointerPosition","event","transform","getEventPosition","pointerPos","xSnapped","ySnapped","getDimensions","offsetWidth","offsetHeight","getHostForElement","getRootNode","window","document","inputTags","isInputDOMNode","composedPath","isInput","includes","nodeName","hasAttribute","closest","isMouseEvent","isMouse","evtX","clientX","touches","evtY","clientY","left","top","getHandleBounds","nodeElement","nodeBounds","handles","querySelectorAll","Array","handle","handleBounds","getBoundingClientRect","getAttribute","getBezierEdgeCenter","sourceX","sourceY","targetX","targetY","sourceControlX","sourceControlY","targetControlX","targetControlY","centerX","centerY","calculateControlOffset","curvature","sqrt","getControlWithCurvature","x1","y1","c","getBezierPath","sourcePosition","targetPosition","labelX","labelY","getEdgeCenter","xOffset","yOffset","getElevatedEdgeZIndex","sourceNode","targetNode","selected","zIndex","elevateOnSelect","edgeOrConnectedNodeSelected","selectedZIndex","z","isEdgeVisible","edgeBox","viewRect","getEdgeId","connectionExists","some","el","addEdge","edgeParams","concat","reconnectEdge","oldEdge","newConnection","shouldReplaceId","oldEdgeId","rest","foundEdge","getStraightPath","handleDirections","getDirection","pow","getPoints","center","offset","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","points","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","defaultOffsetX","defaultOffsetY","verticalSplit","horizontalSplit","sourceTarget","targetSource","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","flipSourceTarget","sourceGapPoint","targetGapPoint","maxXDistance","maxYDistance","pathPoints","getBend","bendSize","xDir","yDir","getSmoothStepPath","borderRadius","path","res","p","i","segment","isNodeInitialized","getEdgePosition","sourceHandleBounds","toHandleBounds","targetHandleBounds","getHandle","connectionMode","Strict","getHandlePosition","fallbackPosition","handleId","d","getMarkerId","marker","idPrefix","Object","sort","join","createMarkerIds","defaultColor","defaultMarkerStart","defaultMarkerEnd","ids","markers","markerStart","markerEnd","markerId","color","localeCompare","getNodeToolbarTransform","nodeRect","align","alignmentOffset","shift","defaultOptions","elevateNodesOnSelect","defaults","adoptUserNodesDefaultOptions","checkEquality","updateAbsolutePositions","parentLookup","_options","values","updateChildPosition","adoptUserNodes","tmpLookup","clear","selectedNodeZ","userNode","internalNode","calculateZ","childNodes","calculateChildXYZ","currPosition","positionChanged","childNode","childZ","parentZ","handleExpandParent","children","changes","parentExpansions","child","parentRect","expandedRect","xChange","yChange","newWidth","newHeight","widthChange","heightChange","setAttributes","updateNodeInternals","updates","domNode","viewportNode","querySelector","updatedInternals","style","getComputedStyle","m22","DOMMatrixReadOnly","parentExpandChildren","update","dimensionChanged","doUpdate","force","parentExpandChanges","panBy","delta","translateExtent","nextViewport","setViewportConstrained","transformChanged","k","updateConnectionLookup","connectionLookup","edgeLookup","sourceKey","targetKey","prevSource","prevTarget","edgeId","shallowNodeData","_a","isArray","_b","is","data","isParentSelected","hasSelector","selector","current","matches","parentElement","getDragItems","nodesDraggable","mousePos","dragItems","draggable","getEventHandlerParams","nodesFromDragItems","dragItem","XYDrag","onNodeMouseDown","getStoreItems","onDragStart","onDrag","onDragStop","lastPos","autoPanId","autoPanStarted","mousePosition","containerBounds","dragStarted","d3Selection","abortDrag","noDragClassName","handleSelector","isSelectable","nodeClickDistance","updateNodes","dragEvent","onNodeDrag","onSelectionDrag","updateNodePositions","hasChange","nodesBox","adjustedNodeExtent","currentNode","currentNodes","autoPan","autoPanSpeed","requestAnimationFrame","startDrag","multiSelectionActive","selectNodesOnDrag","onNodeDragStart","onSelectionDragStart","unselectNodesAndEdges","sourceEvent","d3DragInstance","clickDistance","on","nodeDragThreshold","autoPanOnNodeDrag","cancelAnimationFrame","onNodeDragStop","onSelectionDragStop","isDraggable","button","call","destroy","getHandles","currentHandle","excludedHandle","handleXY","getClosestHandle","connectionRadius","handleLookup","closestHandles","minDistance","getHandleLookup","connectionHandles","matchingHandle","sourceHandles","excludedSource","targetHandles","excludedTarget","excluded","getHandleType","edgeUpdaterType","handleDomNode","classList","contains","isConnectionValid","isInsideConnectionRadius","isHandleValid","alwaysValid","onPointerDown","isTarget","autoPanOnConnect","flowId","cancelConnection","onConnectStart","onConnect","onConnectEnd","isValidConnection","onReconnectEnd","updateConnection","getTransform","getFromHandle","doc","closestHandle","clickedHandle","elementFromPoint","fromHandleInternal","fromNodeInternal","previousConnection","onPointerMove","onPointerUp","result","isValidHandle","fromNodeId","fromHandleId","fromType","removeEventListener","addEventListener","handleBelow","handleToCheck","handleNodeId","connectable","connectableEnd","isConnectable","XYHandle","XYMinimap","getViewScale","selection","zoomStep","pannable","zoomable","inversePan","zoomHandler","pinchDelta","deltaY","deltaMode","nextZoom","scaleTo","panStart","panStartHandler","panHandler","panCurrent","panDelta","moveScale","log","zoomAndPanHandler","viewChanged","prevViewport","eventViewport","transformToViewport","viewportToTransform","translate","scale","isWrappedWithClass","className","isRightClickPan","panOnDrag","usedButton","getD3Transition","onEnd","hasDuration","transition","wheelDelta","factor","ctrlKey","createPanOnScrollHandler","zoomPanValues","noWheelClassName","d3Zoom","panOnScrollMode","panOnScrollSpeed","zoomOnPinch","onPanZoomStart","onPanZoom","onPanZoomEnd","preventDefault","stopImmediatePropagation","currentZoom","property","point","deltaNormalize","deltaX","Vertical","Horizontal","shiftKey","translateBy","internal","clearTimeout","panScrollTimeout","isPanScrolling","setTimeout","createZoomOnScrollHandler","preventScrolling","d3ZoomHandler","preventZoom","createPanZoomStartHandler","onDraggingChange","mouseButton","isZoomingOrPanning","createPanZoomHandler","onPaneContextMenu","onTransformChange","usedRightMouseButton","sync","createPanZoomEndHandler","panOnScroll","timerId","createFilter","zoomActivationKeyPressed","zoomOnScroll","zoomOnDoubleClick","userSelectionActive","noPanClassName","zoomScroll","pinchZoom","buttonAllowed","XYPanZoom","paneClickDistance","bbox","d3ZoomInstance","scaleExtent","d3DblClickZoomHandler","setTransform","isPanOnScroll","wheelHandler","passive","startHandler","panZoomHandler","panZoomEndHandler","nextTransform","contrainedTransform","constrain","syncViewport","currentTransform","getViewport","scaleBy","setScaleExtent","setTranslateExtent","setClickDistance","validDistance","ResizeControlVariant","XY_RESIZER_HANDLE_POSITIONS","XY_RESIZER_LINE_POSITIONS","getResizeDirection","prevWidth","prevHeight","affectsX","affectsY","deltaWidth","deltaHeight","direction","getControlDirection","controlPosition","isHorizontal","isVertical","getLowerExtentClamp","lowerExtent","lowerBound","getUpperExtentClamp","upperExtent","upperBound","getSizeClamp","minSize","maxSize","xor","getDimensionsAfterResize","startValues","controlDirection","pointerPosition","boundaries","keepAspectRatio","childExtent","isDiagonal","minWidth","maxWidth","minHeight","maxHeight","startX","startY","startWidth","startHeight","aspectRatio","distX","floor","pointerX","distY","pointerY","originOffsetX","originOffsetY","clampX","clampY","xExtentClamp","yExtentClamp","aspectHeightClamp","aspectExtentClamp","aspectWidthClamp","initPrevValues","initStartValues","nodeToParentExtent","nodeToChildExtent","XYResizer","onChange","onResizeStart","onResize","onResizeEnd","shouldResize","prevValues","parentExtent","dragHandler","childId","storeNodeOrigin","childChanges","prevX","prevY","change","isWidthChange","isHeightChange","isXPosChange","isYPosChange","xLimit","yLimit","nextValues","callResize"],"sources":["C:/Users/hhdgk/OneDrive/Documents/solana-ai-mvp-6/frontend/node_modules/@xyflow/system/dist/esm/index.mjs"],"sourcesContent":["import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\n\nconst errorMessages = {\n    error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n    error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n    error003: (nodeType) => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n    error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n    error005: () => 'Only child nodes can use a parent extent.',\n    error006: () => \"Can't create edge. An edge needs a source and a target.\",\n    error007: (id) => `The old edge with id=${id} does not exist.`,\n    error009: (type) => `Marker type \"${type}\" doesn't exist.`,\n    error008: (handleType, { id, sourceHandle, targetHandle }) => `Couldn't create edge for ${handleType} handle id: \"${!sourceHandle ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n    error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n    error011: (edgeType) => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n    error012: (id) => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n    error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\n};\nconst infiniteExtent = [\n    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\n    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\n];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\n\nvar ConnectionMode;\n(function (ConnectionMode) {\n    ConnectionMode[\"Strict\"] = \"strict\";\n    ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n    PanOnScrollMode[\"Free\"] = \"free\";\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[\"Partial\"] = \"partial\";\n    SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n    inProgress: false,\n    isValid: null,\n    from: null,\n    fromHandle: null,\n    fromPosition: null,\n    fromNode: null,\n    to: null,\n    toHandle: null,\n    toPosition: null,\n    toNode: null,\n};\n\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n    ConnectionLineType[\"Bezier\"] = \"default\";\n    ConnectionLineType[\"Straight\"] = \"straight\";\n    ConnectionLineType[\"Step\"] = \"step\";\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[\"Arrow\"] = \"arrow\";\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\nvar Position;\n(function (Position) {\n    Position[\"Left\"] = \"left\";\n    Position[\"Top\"] = \"top\";\n    Position[\"Right\"] = \"right\";\n    Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n    [Position.Left]: Position.Right,\n    [Position.Right]: Position.Left,\n    [Position.Top]: Position.Bottom,\n    [Position.Bottom]: Position.Top,\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b || a.size !== b.size) {\n        return false;\n    }\n    if (!a.size && !b.size) {\n        return true;\n    }\n    for (const key of a.keys()) {\n        if (!b.has(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n    if (!cb) {\n        return;\n    }\n    const diff = [];\n    a.forEach((connection, key) => {\n        if (!b?.has(key)) {\n            diff.push(connection);\n        }\n    });\n    if (diff.length) {\n        cb(diff);\n    }\n}\nfunction getConnectionStatus(isValid) {\n    return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is useable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = (element) => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is useable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = (element) => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = (element) => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * Pass in a node, and get connected nodes where edge.source === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the source is the given node\n */\nconst getOutgoers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const outgoerIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.source === node.id) {\n            outgoerIds.add(edge.target);\n        }\n    });\n    return nodes.filter((n) => outgoerIds.has(n.id));\n};\n/**\n * Pass in a node, and get connected nodes where edge.target === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the target is the given node\n */\nconst getIncomers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const incomersIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.target === node.id) {\n            incomersIds.add(edge.source);\n        }\n    });\n    return nodes.filter((n) => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n    const { width, height } = getNodeDimensions(node);\n    const origin = node.origin ?? nodeOrigin;\n    const offsetX = width * origin[0];\n    const offsetY = height * origin[1];\n    return {\n        x: node.position.x - offsetX,\n        y: node.position.y - offsetY,\n    };\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\n * @returns Bounding box enclosing all nodes\n */\nconst getNodesBounds = (nodes, params = { nodeOrigin: [0, 0] }) => {\n    if (nodes.length === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    const box = nodes.reduce((currBox, node) => {\n        const nodeBox = nodeToBox(node, params.nodeOrigin);\n        return getBoundsOfBoxes(currBox, nodeBox);\n    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });\n    return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n    if (nodeLookup.size === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    let box = { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity };\n    nodeLookup.forEach((node) => {\n        if (params.filter === undefined || params.filter(node)) {\n            const nodeBox = nodeToBox(node);\n            box = getBoundsOfBoxes(box, nodeBox);\n        }\n    });\n    return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, \n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n    const paneRect = {\n        ...pointToRendererPoint(rect, [tx, ty, tScale]),\n        width: rect.width / tScale,\n        height: rect.height / tScale,\n    };\n    const visibleNodes = [];\n    for (const [, node] of nodes) {\n        const { measured, selectable = true, hidden = false } = node;\n        const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n        const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n        if ((excludeNonSelectableNodes && !selectable) || hidden) {\n            continue;\n        }\n        const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n        const notInitialized = width === null || height === null;\n        const partiallyVisible = partially && overlappingArea > 0;\n        const area = (width ?? 0) * (height ?? 0);\n        const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;\n        if (isVisible || node.dragging) {\n            visibleNodes.push(node);\n        }\n    }\n    return visibleNodes;\n};\n/**\n * Get all connecting edges for a given set of nodes\n * @param nodes - Nodes you want to get the connected edges for\n * @param edges - All edges\n * @returns Array of edges that connect any of the given nodes with each other\n */\nconst getConnectedEdges = (nodes, edges) => {\n    const nodeIds = new Set();\n    nodes.forEach((node) => {\n        nodeIds.add(node.id);\n    });\n    return edges.filter((edge) => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n    const fitViewNodes = new Map();\n    const optionNodeIds = options?.nodes ? new Set(options.nodes.map((node) => node.id)) : null;\n    nodeLookup.forEach((n) => {\n        const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n        if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n            fitViewNodes.set(n.id, n);\n        }\n    });\n    return fitViewNodes;\n}\nasync function fitView({ nodes, width, height, panZoom, minZoom, maxZoom }, options) {\n    if (nodes.size === 0) {\n        return Promise.resolve(false);\n    }\n    const bounds = getInternalNodesBounds(nodes);\n    const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n    await panZoom.setViewport(viewport, { duration: options?.duration });\n    return Promise.resolve(true);\n}\n/**\n * This function clamps the passed extend by the node's width and height.\n * This is needed to prevent the node from being dragged outside of its extent.\n *\n * @param node\n * @param extent\n * @returns\n */\nfunction clampNodeExtent(node, extent) {\n    if (!extent || extent === 'parent') {\n        return extent;\n    }\n    return [extent[0], [extent[1][0] - (node.measured?.width ?? 0), extent[1][1] - (node.measured?.height ?? 0)]];\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({ nodeId, nextPosition, nodeLookup, nodeOrigin = [0, 0], nodeExtent, onError, }) {\n    const node = nodeLookup.get(nodeId);\n    const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n    const { x: parentX, y: parentY } = parentNode ? parentNode.internals.positionAbsolute : { x: 0, y: 0 };\n    const origin = node.origin ?? nodeOrigin;\n    let currentExtent = clampNodeExtent(node, node.extent || nodeExtent);\n    if (node.extent === 'parent' && !node.expandParent) {\n        if (!parentNode) {\n            onError?.('005', errorMessages['error005']());\n        }\n        else {\n            const nodeWidth = node.measured.width;\n            const nodeHeight = node.measured.height;\n            const parentWidth = parentNode.measured.width;\n            const parentHeight = parentNode.measured.height;\n            if (nodeWidth && nodeHeight && parentWidth && parentHeight) {\n                currentExtent = [\n                    [parentX, parentY],\n                    [parentX + parentWidth - nodeWidth, parentY + parentHeight - nodeHeight],\n                ];\n            }\n        }\n    }\n    else if (parentNode && isCoordinateExtent(node.extent)) {\n        currentExtent = [\n            [node.extent[0][0] + parentX, node.extent[0][1] + parentY],\n            [node.extent[1][0] + parentX, node.extent[1][1] + parentY],\n        ];\n    }\n    const positionAbsolute = isCoordinateExtent(currentExtent)\n        ? clampPosition(nextPosition, currentExtent)\n        : nextPosition;\n    return {\n        position: {\n            // TODO: is there a better way to do this?\n            x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n            y: positionAbsolute.y - parentY + node.measured.height * origin[1],\n        },\n        positionAbsolute,\n    };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({ nodesToRemove = [], edgesToRemove = [], nodes, edges, onBeforeDelete, }) {\n    const nodeIds = new Set(nodesToRemove.map((node) => node.id));\n    const matchingNodes = [];\n    for (const node of nodes) {\n        if (node.deletable === false) {\n            continue;\n        }\n        const isIncluded = nodeIds.has(node.id);\n        const parentHit = !isIncluded && node.parentId && matchingNodes.find((n) => n.id === node.parentId);\n        if (isIncluded || parentHit) {\n            matchingNodes.push(node);\n        }\n    }\n    const edgeIds = new Set(edgesToRemove.map((edge) => edge.id));\n    const deletableEdges = edges.filter((edge) => edge.deletable !== false);\n    const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n    const matchingEdges = connectedEdges;\n    for (const edge of deletableEdges) {\n        const isIncluded = edgeIds.has(edge.id);\n        if (isIncluded && !matchingEdges.find((e) => e.id === edge.id)) {\n            matchingEdges.push(edge);\n        }\n    }\n    if (!onBeforeDelete) {\n        return {\n            edges: matchingEdges,\n            nodes: matchingNodes,\n        };\n    }\n    const onBeforeDeleteResult = await onBeforeDelete({\n        nodes: matchingNodes,\n        edges: matchingEdges,\n    });\n    if (typeof onBeforeDeleteResult === 'boolean') {\n        return onBeforeDeleteResult ? { edges: matchingEdges, nodes: matchingNodes } : { edges: [], nodes: [] };\n    }\n    return onBeforeDeleteResult;\n}\n\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = { x: 0, y: 0 }, extent) => ({\n    x: clamp(position.x, extent[0][0], extent[1][0]),\n    y: clamp(position.y, extent[0][1], extent[1][1]),\n});\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n    if (value < min) {\n        return clamp(Math.abs(value - min), 1, min) / min;\n    }\n    else if (value > max) {\n        return -clamp(Math.abs(value - max), 1, min) / min;\n    }\n    return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n    const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n    const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n    return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n    x: Math.min(box1.x, box2.x),\n    y: Math.min(box1.y, box2.y),\n    x2: Math.max(box1.x2, box2.x2),\n    y2: Math.max(box1.y2, box2.y2),\n});\nconst rectToBox = ({ x, y, width, height }) => ({\n    x,\n    y,\n    x2: x + width,\n    y2: y + height,\n});\nconst boxToRect = ({ x, y, x2, y2 }) => ({\n    x,\n    y,\n    width: x2 - x,\n    height: y2 - y,\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n        y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0),\n    };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n    return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = (n) => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n    if (process.env.NODE_ENV === 'development') {\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n    }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n    return {\n        x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n        y: snapGrid[1] * Math.round(position.y / snapGrid[1]),\n    };\n};\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n    const position = {\n        x: (x - tx) / tScale,\n        y: (y - ty) / tScale,\n    };\n    return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {\n    return {\n        x: x * tScale + tx,\n        y: y * tScale + ty,\n    };\n};\n/**\n * Returns a viewport that encloses the given bounds with optional padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport\n * @param width - Width of the viewport\n * @param height  - Height of the viewport\n * @param minZoom - Minimum zoom level of the resulting viewport\n * @param maxZoom - Maximum zoom level of the resulting viewport\n * @param padding - Optional padding around the bounds\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n  { x: 0, y: 0, width: 100, height: 100},\n  1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n    const xZoom = width / (bounds.width * (1 + padding));\n    const yZoom = height / (bounds.height * (1 + padding));\n    const zoom = Math.min(xZoom, yZoom);\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\n    const boundsCenterX = bounds.x + bounds.width / 2;\n    const boundsCenterY = bounds.y + bounds.height / 2;\n    const x = width / 2 - boundsCenterX * clampedZoom;\n    const y = height / 2 - boundsCenterY * clampedZoom;\n    return { x, y, zoom: clampedZoom };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n    return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n    return {\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n}\nfunction nodeHasDimensions(node) {\n    return ((node.measured?.width ?? node.width ?? node.initialWidth) !== undefined &&\n        (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined);\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = { width: 0, height: 0 }, parentId, nodeLookup, nodeOrigin) {\n    let nextParentId = parentId;\n    const positionAbsolute = { ...position };\n    while (nextParentId) {\n        const parent = nodeLookup.get(nextParentId);\n        nextParentId = parent?.parentId;\n        if (parent) {\n            const origin = parent.origin || nodeOrigin;\n            positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n            positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n        }\n    }\n    return positionAbsolute;\n}\n\nfunction getPointerPosition(event, { snapGrid = [0, 0], snapToGrid = false, transform }) {\n    const { x, y } = getEventPosition(event);\n    const pointerPos = pointToRendererPoint({ x, y }, transform);\n    const { x: xSnapped, y: ySnapped } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n    // we need the snapped position in order to be able to skip unnecessary drag events\n    return {\n        xSnapped,\n        ySnapped,\n        ...pointerPos,\n    };\n}\nconst getDimensions = (node) => ({\n    width: node.offsetWidth,\n    height: node.offsetHeight,\n});\nconst getHostForElement = (element) => element.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n    // using composed path for handling shadow dom\n    const target = (event.composedPath?.()?.[0] || event.target);\n    const isInput = inputTags.includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\n    return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = (event) => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n    const isMouse = isMouseEvent(event);\n    const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n    const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n    return {\n        x: evtX - (bounds?.left ?? 0),\n        y: evtY - (bounds?.top ?? 0),\n    };\n};\n// The handle bounds are calculated relative to the node element.\n// We store them in the internals object of the node in order to avoid\n// unnecessary recalculations.\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n    const handles = nodeElement.querySelectorAll(`.${type}`);\n    if (!handles || !handles.length) {\n        return null;\n    }\n    return Array.from(handles).map((handle) => {\n        const handleBounds = handle.getBoundingClientRect();\n        return {\n            id: handle.getAttribute('data-handleid'),\n            type,\n            nodeId,\n            position: handle.getAttribute('data-handlepos'),\n            x: (handleBounds.left - nodeBounds.left) / zoom,\n            y: (handleBounds.top - nodeBounds.top) / zoom,\n            ...getDimensions(handle),\n        };\n    });\n};\n\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY, }) {\n    // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n    // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n    const offsetX = Math.abs(centerX - sourceX);\n    const offsetY = Math.abs(centerY - sourceY);\n    return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n    return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\n    switch (pos) {\n        case Position.Left:\n            return [x1 - calculateControlOffset(x1 - x2, c), y1];\n        case Position.Right:\n            return [x1 + calculateControlOffset(x2 - x1, c), y1];\n        case Position.Top:\n            return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n        case Position.Bottom:\n            return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n    }\n}\n/**\n * Get a bezier path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @param params.curvature - The curvature of the bezier edge\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n});\n */\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25, }) {\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        c: curvature,\n    });\n    const [targetControlX, targetControlY] = getControlWithCurvature({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n        c: curvature,\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY,\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY, }) {\n    const xOffset = Math.abs(targetX - sourceX) / 2;\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n    const yOffset = Math.abs(targetY - sourceY) / 2;\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n    return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({ sourceNode, targetNode, selected = false, zIndex = 0, elevateOnSelect = false, }) {\n    if (!elevateOnSelect) {\n        return zIndex;\n    }\n    const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n    const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n    return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({ sourceNode, targetNode, width, height, transform }) {\n    const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n    if (edgeBox.x === edgeBox.x2) {\n        edgeBox.x2 += 1;\n    }\n    if (edgeBox.y === edgeBox.y2) {\n        edgeBox.y2 += 1;\n    }\n    const viewRect = {\n        x: -transform[0] / transform[2],\n        y: -transform[1] / transform[2],\n        width: width / transform[2],\n        height: height / transform[2],\n    };\n    return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n    return edges.some((el) => el.source === edge.source &&\n        el.target === edge.target &&\n        (el.sourceHandle === edge.sourceHandle || (!el.sourceHandle && !edge.sourceHandle)) &&\n        (el.targetHandle === edge.targetHandle || (!el.targetHandle && !edge.targetHandle)));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges\n * @remarks It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an Edge or a Connection you want to add\n * @param edges -  The array of all current edges\n * @returns A new array of edges with the new edge added\n */\nconst addEdge = (edgeParams, edges) => {\n    if (!edgeParams.source || !edgeParams.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    let edge;\n    if (isEdgeBase(edgeParams)) {\n        edge = { ...edgeParams };\n    }\n    else {\n        edge = {\n            ...edgeParams,\n            id: getEdgeId(edgeParams),\n        };\n    }\n    if (connectionExists(edge, edges)) {\n        return edges;\n    }\n    if (edge.sourceHandle === null) {\n        delete edge.sourceHandle;\n    }\n    if (edge.targetHandle === null) {\n        delete edge.targetHandle;\n    }\n    return edges.concat(edge);\n};\n/**\n * A handy utility to reconnect an existing edge with new properties\n * @param oldEdge - The edge you want to update\n * @param newConnection - The new connection you want to update the edge with\n * @param edges - The array of all current edges\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\n * @returns the updated edges array\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = { shouldReplaceId: true }) => {\n    const { id: oldEdgeId, ...rest } = oldEdge;\n    if (!newConnection.source || !newConnection.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    const foundEdge = edges.find((e) => e.id === oldEdge.id);\n    if (!foundEdge) {\n        devWarn('007', errorMessages['error007'](oldEdgeId));\n        return edges;\n    }\n    // Remove old edge and create the new edge with parameters of old edge.\n    const edge = {\n        ...rest,\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n        source: newConnection.source,\n        target: newConnection.target,\n        sourceHandle: newConnection.sourceHandle,\n        targetHandle: newConnection.targetHandle,\n    };\n    return edges.filter((e) => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Get a straight path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY, }) {\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n    });\n    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\nconst handleDirections = {\n    [Position.Left]: { x: -1, y: 0 },\n    [Position.Right]: { x: 1, y: 0 },\n    [Position.Top]: { x: 0, y: -1 },\n    [Position.Bottom]: { x: 0, y: 1 },\n};\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target, }) => {\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n        return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\n    }\n    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset, }) {\n    const sourceDir = handleDirections[sourcePosition];\n    const targetDir = handleDirections[targetPosition];\n    const sourceGapped = { x: source.x + sourceDir.x * offset, y: source.y + sourceDir.y * offset };\n    const targetGapped = { x: target.x + targetDir.x * offset, y: target.y + targetDir.y * offset };\n    const dir = getDirection({\n        source: sourceGapped,\n        sourcePosition,\n        target: targetGapped,\n    });\n    const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n    const currDir = dir[dirAccessor];\n    let points = [];\n    let centerX, centerY;\n    const sourceGapOffset = { x: 0, y: 0 };\n    const targetGapOffset = { x: 0, y: 0 };\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n    });\n    // opposite handle positions, default case\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n        centerX = center.x ?? defaultCenterX;\n        centerY = center.y ?? defaultCenterY;\n        //    --->\n        //    |\n        // >---\n        const verticalSplit = [\n            { x: centerX, y: sourceGapped.y },\n            { x: centerX, y: targetGapped.y },\n        ];\n        //    |\n        //  ---\n        //  |\n        const horizontalSplit = [\n            { x: sourceGapped.x, y: centerY },\n            { x: targetGapped.x, y: centerY },\n        ];\n        if (sourceDir[dirAccessor] === currDir) {\n            points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n        }\n        else {\n            points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n        }\n    }\n    else {\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\n        const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];\n        const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];\n        // this handles edges with same handle positions\n        if (dirAccessor === 'x') {\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\n        }\n        else {\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\n        }\n        if (sourcePosition === targetPosition) {\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n            if (diff <= offset) {\n                const gapOffset = Math.min(offset - 1, offset - diff);\n                if (sourceDir[dirAccessor] === currDir) {\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n                else {\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n            }\n        }\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\n        if (sourcePosition !== targetPosition) {\n            const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n            const flipSourceTarget = (sourceDir[dirAccessor] === 1 && ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\n                (sourceDir[dirAccessor] !== 1 && ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\n            if (flipSourceTarget) {\n                points = dirAccessor === 'x' ? sourceTarget : targetSource;\n            }\n        }\n        const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };\n        const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n        // we want to place the label on the longest segment of the edge\n        if (maxXDistance >= maxYDistance) {\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n            centerY = points[0].y;\n        }\n        else {\n            centerX = points[0].x;\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n        }\n    }\n    const pathPoints = [\n        source,\n        { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\n        ...points,\n        { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\n        target,\n    ];\n    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n    const { x, y } = b;\n    // no bend\n    if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\n        return `L${x} ${y}`;\n    }\n    // first segment is horizontal\n    if (a.y === y) {\n        const xDir = a.x < c.x ? -1 : 1;\n        const yDir = a.y < c.y ? 1 : -1;\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n    }\n    const xDir = a.x < c.x ? 1 : -1;\n    const yDir = a.y < c.y ? -1 : 1;\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * Get a smooth step path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20, }) {\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n        source: { x: sourceX, y: sourceY },\n        sourcePosition,\n        target: { x: targetX, y: targetY },\n        targetPosition,\n        center: { x: centerX, y: centerY },\n        offset,\n    });\n    const path = points.reduce((res, p, i) => {\n        let segment = '';\n        if (i > 0 && i < points.length - 1) {\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n        }\n        else {\n            segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n        }\n        res += segment;\n        return res;\n    }, '');\n    return [path, labelX, labelY, offsetX, offsetY];\n}\n\nfunction isNodeInitialized(node) {\n    return (node &&\n        !!(node.internals.handleBounds || node.handles?.length) &&\n        !!(node.measured.width || node.width || node.initialWidth));\n}\nfunction getEdgePosition(params) {\n    const { sourceNode, targetNode } = params;\n    if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n        return null;\n    }\n    const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n    const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n    const sourceHandle = getHandle(sourceHandleBounds?.source ?? [], params.sourceHandle);\n    const targetHandle = getHandle(\n    // when connection type is loose we can define all handles as sources and connect source -> source\n    params.connectionMode === ConnectionMode.Strict\n        ? targetHandleBounds?.target ?? []\n        : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n    if (!sourceHandle || !targetHandle) {\n        params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n            id: params.id,\n            sourceHandle: params.sourceHandle,\n            targetHandle: params.targetHandle,\n        }));\n        return null;\n    }\n    const sourcePosition = sourceHandle?.position || Position.Bottom;\n    const targetPosition = targetHandle?.position || Position.Top;\n    const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n    const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n    return {\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n        sourcePosition,\n        targetPosition,\n    };\n}\nfunction toHandleBounds(handles) {\n    if (!handles) {\n        return null;\n    }\n    const source = [];\n    const target = [];\n    for (const handle of handles) {\n        handle.width = handle.width ?? 1;\n        handle.height = handle.height ?? 1;\n        if (handle.type === 'source') {\n            source.push(handle);\n        }\n        else if (handle.type === 'target') {\n            target.push(handle);\n        }\n    }\n    return {\n        source,\n        target,\n    };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n    const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n    const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n    const { width, height } = handle ?? getNodeDimensions(node);\n    if (center) {\n        return { x: x + width / 2, y: y + height / 2 };\n    }\n    const position = handle?.position ?? fallbackPosition;\n    switch (position) {\n        case Position.Top:\n            return { x: x + width / 2, y };\n        case Position.Right:\n            return { x: x + width, y: y + height / 2 };\n        case Position.Bottom:\n            return { x: x + width / 2, y: y + height };\n        case Position.Left:\n            return { x, y: y + height / 2 };\n    }\n}\nfunction getHandle(bounds, handleId) {\n    if (!bounds) {\n        return null;\n    }\n    // if no handleId is given, we use the first handle, otherwise we check for the id\n    return (!handleId ? bounds[0] : bounds.find((d) => d.id === handleId)) || null;\n}\n\nfunction getMarkerId(marker, id) {\n    if (!marker) {\n        return '';\n    }\n    if (typeof marker === 'string') {\n        return marker;\n    }\n    const idPrefix = id ? `${id}__` : '';\n    return `${idPrefix}${Object.keys(marker)\n        .sort()\n        .map((key) => `${key}=${marker[key]}`)\n        .join('&')}`;\n}\nfunction createMarkerIds(edges, { id, defaultColor, defaultMarkerStart, defaultMarkerEnd, }) {\n    const ids = new Set();\n    return edges\n        .reduce((markers, edge) => {\n        [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach((marker) => {\n            if (marker && typeof marker === 'object') {\n                const markerId = getMarkerId(marker, id);\n                if (!ids.has(markerId)) {\n                    markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });\n                    ids.add(markerId);\n                }\n            }\n        });\n        return markers;\n    }, [])\n        .sort((a, b) => a.id.localeCompare(b.id));\n}\n\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n    let alignmentOffset = 0.5;\n    if (align === 'start') {\n        alignmentOffset = 0;\n    }\n    else if (align === 'end') {\n        alignmentOffset = 1;\n    }\n    // position === Position.Top\n    // we set the x any y position of the toolbar based on the nodes position\n    let pos = [\n        (nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x,\n        nodeRect.y * viewport.zoom + viewport.y - offset,\n    ];\n    // and than shift it based on the alignment. The shift values are in %.\n    let shift = [-100 * alignmentOffset, -100];\n    switch (position) {\n        case Position.Right:\n            pos = [\n                (nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [0, -100 * alignmentOffset];\n            break;\n        case Position.Bottom:\n            pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n            shift[1] = 0;\n            break;\n        case Position.Left:\n            pos = [\n                nodeRect.x * viewport.zoom + viewport.x - offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [-100, -100 * alignmentOffset];\n            break;\n    }\n    return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\n\nconst defaultOptions = {\n    nodeOrigin: [0, 0],\n    elevateNodesOnSelect: true,\n    defaults: {},\n};\nconst adoptUserNodesDefaultOptions = {\n    ...defaultOptions,\n    checkEquality: true,\n};\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n    const _options = { ...defaultOptions, ...options };\n    for (const node of nodeLookup.values()) {\n        if (!node.parentId) {\n            continue;\n        }\n        updateChildPosition(node, nodeLookup, parentLookup, _options);\n    }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n    const _options = { ...adoptUserNodesDefaultOptions, ...options };\n    const tmpLookup = new Map(nodeLookup);\n    nodeLookup.clear();\n    parentLookup.clear();\n    const selectedNodeZ = options?.elevateNodesOnSelect ? 1000 : 0;\n    for (const userNode of nodes) {\n        let internalNode = tmpLookup.get(userNode.id);\n        if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        else {\n            internalNode = {\n                ..._options.defaults,\n                ...userNode,\n                measured: {\n                    width: userNode.measured?.width,\n                    height: userNode.measured?.height,\n                },\n                internals: {\n                    positionAbsolute: getNodePositionWithOrigin(userNode, _options.nodeOrigin),\n                    // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n                    handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n                    z: calculateZ(userNode, selectedNodeZ),\n                    userNode,\n                },\n            };\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        if (userNode.parentId) {\n            updateChildPosition(internalNode, nodeLookup, parentLookup, options);\n        }\n    }\n}\nfunction updateChildPosition(node, nodeLookup, parentLookup, options) {\n    const _options = { ...defaultOptions, ...options };\n    const parentId = node.parentId;\n    const parentNode = nodeLookup.get(parentId);\n    if (!parentNode) {\n        console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n        return;\n    }\n    // update the parentLookup\n    const childNodes = parentLookup.get(parentId);\n    if (childNodes) {\n        childNodes.set(node.id, node);\n    }\n    else {\n        parentLookup.set(parentId, new Map([[node.id, node]]));\n    }\n    const selectedNodeZ = options?.elevateNodesOnSelect ? 1000 : 0;\n    const { x, y, z } = calculateChildXYZ(node, parentNode, _options.nodeOrigin, selectedNodeZ);\n    const currPosition = node.internals.positionAbsolute;\n    const positionChanged = x !== currPosition.x || y !== currPosition.y;\n    if (positionChanged || z !== node.internals.z) {\n        node.internals = {\n            ...node.internals,\n            positionAbsolute: positionChanged ? { x, y } : currPosition,\n            z,\n        };\n    }\n}\nfunction calculateZ(node, selectedNodeZ) {\n    return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, selectedNodeZ) {\n    const position = getNodePositionWithOrigin(childNode, nodeOrigin);\n    const childZ = calculateZ(childNode, selectedNodeZ);\n    const parentZ = parentNode.internals.z ?? 0;\n    return {\n        x: parentNode.internals.positionAbsolute.x + position.x,\n        y: parentNode.internals.positionAbsolute.y + position.y,\n        z: parentZ > childZ ? parentZ : childZ,\n    };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n    const changes = [];\n    const parentExpansions = new Map();\n    // determine the expanded rectangle the child nodes would take for each parent\n    for (const child of children) {\n        const parent = nodeLookup.get(child.parentId);\n        if (!parent) {\n            continue;\n        }\n        const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n        const expandedRect = getBoundsOfRects(parentRect, child.rect);\n        parentExpansions.set(child.parentId, { expandedRect, parent });\n    }\n    if (parentExpansions.size > 0) {\n        parentExpansions.forEach(({ expandedRect, parent }, parentId) => {\n            // determine the position & dimensions of the parent\n            const positionAbsolute = parent.internals.positionAbsolute;\n            const dimensions = getNodeDimensions(parent);\n            const origin = parent.origin ?? nodeOrigin;\n            // determine how much the parent expands in width and position\n            const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n            const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n            const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n            const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n            const widthChange = (newWidth - dimensions.width) * origin[0];\n            const heightChange = (newHeight - dimensions.height) * origin[1];\n            // We need to correct the position of the parent node if the origin is not [0,0]\n            if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'position',\n                    position: {\n                        x: parent.position.x - xChange + widthChange,\n                        y: parent.position.y - yChange + heightChange,\n                    },\n                });\n                // We move all child nodes in the oppsite direction\n                // so the x,y changes of the parent do not move the children\n                parentLookup.get(parentId)?.forEach((childNode) => {\n                    if (!children.some((child) => child.id === childNode.id)) {\n                        changes.push({\n                            id: childNode.id,\n                            type: 'position',\n                            position: {\n                                x: childNode.position.x + xChange,\n                                y: childNode.position.y + yChange,\n                            },\n                        });\n                    }\n                });\n            }\n            // We need to correct the dimensions of the parent node if the origin is not [0,0]\n            if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'dimensions',\n                    setAttributes: true,\n                    dimensions: {\n                        width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n                        height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0),\n                    },\n                });\n            }\n        });\n    }\n    return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin) {\n    const viewportNode = domNode?.querySelector('.xyflow__viewport');\n    let updatedInternals = false;\n    if (!viewportNode) {\n        return { changes: [], updatedInternals };\n    }\n    const changes = [];\n    const style = window.getComputedStyle(viewportNode);\n    const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\n    // in this array we collect nodes, that might trigger changes (like expanding parent)\n    const parentExpandChildren = [];\n    for (const update of updates.values()) {\n        const node = nodeLookup.get(update.id);\n        if (!node) {\n            continue;\n        }\n        if (node.hidden) {\n            node.internals = {\n                ...node.internals,\n                handleBounds: undefined,\n            };\n            updatedInternals = true;\n        }\n        else {\n            const dimensions = getDimensions(update.nodeElement);\n            const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n            const doUpdate = !!(dimensions.width &&\n                dimensions.height &&\n                (dimensionChanged || !node.internals.handleBounds || update.force));\n            if (doUpdate) {\n                const nodeBounds = update.nodeElement.getBoundingClientRect();\n                node.measured = dimensions;\n                node.internals = {\n                    ...node.internals,\n                    positionAbsolute: getNodePositionWithOrigin(node, nodeOrigin),\n                    handleBounds: {\n                        source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n                        target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id),\n                    },\n                };\n                if (node.parentId) {\n                    updateChildPosition(node, nodeLookup, parentLookup, { nodeOrigin });\n                }\n                updatedInternals = true;\n                if (dimensionChanged) {\n                    changes.push({\n                        id: node.id,\n                        type: 'dimensions',\n                        dimensions,\n                    });\n                    if (node.expandParent && node.parentId) {\n                        parentExpandChildren.push({\n                            id: node.id,\n                            parentId: node.parentId,\n                            rect: nodeToRect(node, nodeOrigin),\n                        });\n                    }\n                }\n            }\n        }\n    }\n    if (parentExpandChildren.length > 0) {\n        const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n        changes.push(...parentExpandChanges);\n    }\n    return { changes, updatedInternals };\n}\nasync function panBy({ delta, panZoom, transform, translateExtent, width, height, }) {\n    if (!panZoom || (!delta.x && !delta.y)) {\n        return Promise.resolve(false);\n    }\n    const nextViewport = await panZoom.setViewportConstrained({\n        x: transform[0] + delta.x,\n        y: transform[1] + delta.y,\n        zoom: transform[2],\n    }, [\n        [0, 0],\n        [width, height],\n    ], translateExtent);\n    const transformChanged = !!nextViewport &&\n        (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n    return Promise.resolve(transformChanged);\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n    connectionLookup.clear();\n    edgeLookup.clear();\n    for (const edge of edges) {\n        const { source, target, sourceHandle = null, targetHandle = null } = edge;\n        const sourceKey = `${source}-source-${sourceHandle}`;\n        const targetKey = `${target}-target-${targetHandle}`;\n        const prevSource = connectionLookup.get(sourceKey) || new Map();\n        const prevTarget = connectionLookup.get(targetKey) || new Map();\n        const connection = { edgeId: edge.id, source, target, sourceHandle, targetHandle };\n        edgeLookup.set(edge.id, edge);\n        connectionLookup.set(sourceKey, prevSource.set(`${target}-${targetHandle}`, connection));\n        connectionLookup.set(targetKey, prevTarget.set(`${source}-${sourceHandle}`, connection));\n    }\n}\n\nfunction shallowNodeData(a, b) {\n    if (a === null || b === null) {\n        return false;\n    }\n    const _a = Array.isArray(a) ? a : [a];\n    const _b = Array.isArray(b) ? b : [b];\n    if (_a.length !== _b.length) {\n        return false;\n    }\n    for (let i = 0; i < _a.length; i++) {\n        if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isParentSelected(node, nodeLookup) {\n    if (!node.parentId) {\n        return false;\n    }\n    const parentNode = nodeLookup.get(node.parentId);\n    if (!parentNode) {\n        return false;\n    }\n    if (parentNode.selected) {\n        return true;\n    }\n    return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n    let current = target;\n    do {\n        if (current?.matches(selector))\n            return true;\n        if (current === domNode)\n            return false;\n        current = current.parentElement;\n    } while (current);\n    return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n    const dragItems = new Map();\n    for (const [id, node] of nodeLookup) {\n        if ((node.selected || node.id === nodeId) &&\n            (!node.parentId || !isParentSelected(node, nodeLookup)) &&\n            (node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'))) {\n            const internalNode = nodeLookup.get(id);\n            if (internalNode) {\n                dragItems.set(id, {\n                    id,\n                    position: internalNode.position || { x: 0, y: 0 },\n                    distance: {\n                        x: mousePos.x - internalNode.internals.positionAbsolute.x,\n                        y: mousePos.y - internalNode.internals.positionAbsolute.y,\n                    },\n                    extent: internalNode.extent,\n                    parentId: internalNode.parentId,\n                    origin: internalNode.origin,\n                    expandParent: internalNode.expandParent,\n                    internals: {\n                        positionAbsolute: internalNode.internals.positionAbsolute || { x: 0, y: 0 },\n                    },\n                    measured: {\n                        width: internalNode.measured.width ?? 0,\n                        height: internalNode.measured.height ?? 0,\n                    },\n                });\n            }\n        }\n    }\n    return dragItems;\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({ nodeId, dragItems, nodeLookup, dragging = true, }) {\n    const nodesFromDragItems = [];\n    for (const [id, dragItem] of dragItems) {\n        const node = nodeLookup.get(id)?.internals.userNode;\n        if (node) {\n            nodesFromDragItems.push({\n                ...node,\n                position: dragItem.position,\n                dragging,\n            });\n        }\n    }\n    if (!nodeId) {\n        return [nodesFromDragItems[0], nodesFromDragItems];\n    }\n    const node = nodeLookup.get(nodeId).internals.userNode;\n    return [\n        {\n            ...node,\n            position: dragItems.get(nodeId)?.position || node.position,\n            dragging,\n        },\n        nodesFromDragItems,\n    ];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({ onNodeMouseDown, getStoreItems, onDragStart, onDrag, onDragStop, }) {\n    let lastPos = { x: null, y: null };\n    let autoPanId = 0;\n    let dragItems = new Map();\n    let autoPanStarted = false;\n    let mousePosition = { x: 0, y: 0 };\n    let containerBounds = null;\n    let dragStarted = false;\n    let d3Selection = null;\n    let abortDrag = false; // prevents unintentional dragging on multitouch\n    // public functions\n    function update({ noDragClassName, handleSelector, domNode, isSelectable, nodeId, nodeClickDistance = 0, }) {\n        d3Selection = select(domNode);\n        function updateNodes({ x, y }, dragEvent) {\n            const { nodeLookup, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onNodeDrag, onSelectionDrag, onError, updateNodePositions, } = getStoreItems();\n            lastPos = { x, y };\n            let hasChange = false;\n            let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };\n            if (dragItems.size > 1 && nodeExtent) {\n                const rect = getInternalNodesBounds(dragItems);\n                nodesBox = rectToBox(rect);\n            }\n            for (const [id, dragItem] of dragItems) {\n                let nextPosition = { x: x - dragItem.distance.x, y: y - dragItem.distance.y };\n                if (snapToGrid) {\n                    nextPosition = snapPosition(nextPosition, snapGrid);\n                }\n                // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n                // based on its position so that the node stays at it's position relative to the selection.\n                let adjustedNodeExtent = [\n                    [nodeExtent[0][0], nodeExtent[0][1]],\n                    [nodeExtent[1][0], nodeExtent[1][1]],\n                ];\n                if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n                    const { positionAbsolute } = dragItem.internals;\n                    const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n                    const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n                    const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n                    const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n                    adjustedNodeExtent = [\n                        [x1, y1],\n                        [x2, y2],\n                    ];\n                }\n                const { position, positionAbsolute } = calculateNodePosition({\n                    nodeId: id,\n                    nextPosition,\n                    nodeLookup,\n                    nodeExtent: adjustedNodeExtent,\n                    nodeOrigin,\n                    onError,\n                });\n                // we want to make sure that we only fire a change event when there is a change\n                hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n                dragItem.position = position;\n                dragItem.internals.positionAbsolute = positionAbsolute;\n            }\n            if (!hasChange) {\n                return;\n            }\n            updateNodePositions(dragItems, true);\n            if (dragEvent && (onDrag || onNodeDrag || (!nodeId && onSelectionDrag))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n                onNodeDrag?.(dragEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDrag?.(dragEvent, currentNodes);\n                }\n            }\n        }\n        async function autoPan() {\n            if (!containerBounds) {\n                return;\n            }\n            const { transform, panBy, autoPanSpeed } = getStoreItems();\n            const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n            if (xMovement !== 0 || yMovement !== 0) {\n                lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n                lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n                if (await panBy({ x: xMovement, y: yMovement })) {\n                    updateNodes(lastPos, null);\n                }\n            }\n            autoPanId = requestAnimationFrame(autoPan);\n        }\n        function startDrag(event) {\n            const { nodeLookup, multiSelectionActive, nodesDraggable, transform, snapGrid, snapToGrid, selectNodesOnDrag, onNodeDragStart, onSelectionDragStart, unselectNodesAndEdges, } = getStoreItems();\n            dragStarted = true;\n            if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n                if (!nodeLookup.get(nodeId)?.selected) {\n                    // we need to reset selected nodes when selectNodesOnDrag=false\n                    unselectNodesAndEdges();\n                }\n            }\n            if (isSelectable && selectNodesOnDrag && nodeId) {\n                onNodeMouseDown?.(nodeId);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            lastPos = pointerPos;\n            dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n            if (dragItems.size > 0 && (onDragStart || onNodeDragStart || (!nodeId && onSelectionDragStart))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDragStart?.(event.sourceEvent, currentNodes);\n                }\n            }\n        }\n        const d3DragInstance = drag()\n            .clickDistance(nodeClickDistance)\n            .on('start', (event) => {\n            const { domNode, nodeDragThreshold, transform, snapGrid, snapToGrid } = getStoreItems();\n            abortDrag = false;\n            if (nodeDragThreshold === 0) {\n                startDrag(event);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            lastPos = pointerPos;\n            containerBounds = domNode?.getBoundingClientRect() || null;\n            mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        })\n            .on('drag', (event) => {\n            const { autoPanOnNodeDrag, transform, snapGrid, snapToGrid, nodeDragThreshold } = getStoreItems();\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            if (event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1) {\n                abortDrag = true;\n            }\n            if (abortDrag) {\n                return;\n            }\n            if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n                autoPanStarted = true;\n                autoPan();\n            }\n            if (!dragStarted) {\n                const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n                const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n                const distance = Math.sqrt(x * x + y * y);\n                if (distance > nodeDragThreshold) {\n                    startDrag(event);\n                }\n            }\n            // skip events without movement\n            if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n                // dragEvent = event.sourceEvent as MouseEvent;\n                mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n                updateNodes(pointerPos, event.sourceEvent);\n            }\n        })\n            .on('end', (event) => {\n            if (!dragStarted || abortDrag) {\n                return;\n            }\n            autoPanStarted = false;\n            dragStarted = false;\n            cancelAnimationFrame(autoPanId);\n            if (dragItems.size > 0) {\n                const { nodeLookup, updateNodePositions, onNodeDragStop, onSelectionDragStop } = getStoreItems();\n                updateNodePositions(dragItems, false);\n                if (onDragStop || onNodeDragStop || (!nodeId && onSelectionDragStop)) {\n                    const [currentNode, currentNodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems,\n                        nodeLookup,\n                        dragging: false,\n                    });\n                    onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                    onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n                    if (!nodeId) {\n                        onSelectionDragStop?.(event.sourceEvent, currentNodes);\n                    }\n                }\n            }\n        })\n            .filter((event) => {\n            const target = event.target;\n            const isDraggable = !event.button &&\n                (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) &&\n                (!handleSelector || hasSelector(target, handleSelector, domNode));\n            return isDraggable;\n        });\n        d3Selection.call(d3DragInstance);\n    }\n    function destroy() {\n        d3Selection?.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\n// this functions collects all handles and adds an absolute position\n// so that we can later find the closest handle to the mouse position\nfunction getHandles(node, handleBounds, type, currentHandle) {\n    let excludedHandle = null;\n    const handles = (handleBounds[type] || []).reduce((res, handle) => {\n        if (node.id === currentHandle.nodeId && type === currentHandle.handleType && handle.id === currentHandle.handleId) {\n            excludedHandle = handle;\n        }\n        else {\n            const handleXY = getHandlePosition(node, handle, handle.position, true);\n            res.push({ ...handle, ...handleXY });\n        }\n        return res;\n    }, []);\n    return [handles, excludedHandle];\n}\nfunction getClosestHandle(pos, connectionRadius, handleLookup) {\n    let closestHandles = [];\n    let minDistance = Infinity;\n    for (const handle of handleLookup.values()) {\n        const distance = Math.sqrt(Math.pow(handle.x - pos.x, 2) + Math.pow(handle.y - pos.y, 2));\n        if (distance <= connectionRadius) {\n            if (distance < minDistance) {\n                closestHandles = [handle];\n            }\n            else if (distance === minDistance) {\n                // when multiple handles are on the same distance we collect all of them\n                closestHandles.push(handle);\n            }\n            minDistance = distance;\n        }\n    }\n    if (!closestHandles.length) {\n        return null;\n    }\n    return closestHandles.length === 1\n        ? closestHandles[0]\n        : // if multiple handles are layouted on top of each other we take the one with type = target because it's more likely that the user wants to connect to this one\n            closestHandles.find((handle) => handle.type === 'target') || closestHandles[0];\n}\nfunction getHandleLookup({ nodeLookup, nodeId, handleId, handleType, }) {\n    const connectionHandles = new Map();\n    const currentHandle = { nodeId, handleId, handleType };\n    let matchingHandle = null;\n    for (const node of nodeLookup.values()) {\n        if (node.internals.handleBounds) {\n            const [sourceHandles, excludedSource] = getHandles(node, node.internals.handleBounds, 'source', currentHandle);\n            const [targetHandles, excludedTarget] = getHandles(node, node.internals.handleBounds, 'target', currentHandle);\n            matchingHandle = matchingHandle ? matchingHandle : excludedSource ?? excludedTarget;\n            [...sourceHandles, ...targetHandles].forEach((handle) => connectionHandles.set(`${handle.nodeId}-${handle.type}-${handle.id}`, handle));\n        }\n    }\n    // if the user only works with handles that are type=\"source\" + connectionMode=\"loose\"\n    // it happens that we can't find a matching handle. The reason for this is, that the\n    // edge don't know about the handles and always assumes that there is source and a target.\n    // In this case we need to find the matching handle by switching the handleType\n    if (!matchingHandle) {\n        const node = nodeLookup.get(nodeId);\n        if (node?.internals.handleBounds) {\n            currentHandle.handleType = handleType === 'source' ? 'target' : 'source';\n            const [, excluded] = getHandles(node, node.internals.handleBounds, currentHandle.handleType, currentHandle);\n            matchingHandle = excluded;\n        }\n    }\n    return [connectionHandles, matchingHandle];\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n    if (edgeUpdaterType) {\n        return edgeUpdaterType;\n    }\n    else if (handleDomNode?.classList.contains('target')) {\n        return 'target';\n    }\n    else if (handleDomNode?.classList.contains('source')) {\n        return 'source';\n    }\n    return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n    let isValid = null;\n    if (isHandleValid) {\n        isValid = true;\n    }\n    else if (isInsideConnectionRadius && !isHandleValid) {\n        isValid = false;\n    }\n    return isValid;\n}\n\nconst alwaysValid = () => true;\nfunction onPointerDown(event, { connectionMode, connectionRadius, handleId, nodeId, edgeUpdaterType, isTarget, domNode, nodeLookup, lib, autoPanOnConnect, flowId, panBy, cancelConnection, onConnectStart, onConnect, onConnectEnd, isValidConnection = alwaysValid, onReconnectEnd, updateConnection, getTransform, getFromHandle, autoPanSpeed, }) {\n    // when xyflow is used inside a shadow root we can't use document\n    const doc = getHostForElement(event.target);\n    let autoPanId = 0;\n    let closestHandle;\n    const { x, y } = getEventPosition(event);\n    const clickedHandle = doc?.elementFromPoint(x, y);\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n    const containerBounds = domNode?.getBoundingClientRect();\n    if (!containerBounds || !handleType) {\n        return;\n    }\n    let position = getEventPosition(event, containerBounds);\n    let autoPanStarted = false;\n    let connection = null;\n    let isValid = false;\n    let handleDomNode = null;\n    const [handleLookup, fromHandleInternal] = getHandleLookup({\n        nodeLookup,\n        nodeId,\n        handleId,\n        handleType,\n    });\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n    function autoPan() {\n        if (!autoPanOnConnect || !containerBounds) {\n            return;\n        }\n        const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n        panBy({ x, y });\n        autoPanId = requestAnimationFrame(autoPan);\n    }\n    // Stays the same for all consecutive pointermove events\n    const fromHandle = {\n        ...fromHandleInternal,\n        nodeId,\n        type: handleType,\n        position: fromHandleInternal.position,\n    };\n    const fromNodeInternal = nodeLookup.get(nodeId);\n    const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n    const newConnection = {\n        inProgress: true,\n        isValid: null,\n        from,\n        fromHandle,\n        fromPosition: fromHandle.position,\n        fromNode: fromNodeInternal,\n        to: position,\n        toHandle: null,\n        toPosition: oppositePosition[fromHandle.position],\n        toNode: null,\n    };\n    updateConnection(newConnection);\n    let previousConnection = newConnection;\n    onConnectStart?.(event, { nodeId, handleId, handleType });\n    function onPointerMove(event) {\n        if (!getFromHandle() || !fromHandle) {\n            onPointerUp(event);\n            return;\n        }\n        const transform = getTransform();\n        position = getEventPosition(event, containerBounds);\n        closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, handleLookup);\n        if (!autoPanStarted) {\n            autoPan();\n            autoPanStarted = true;\n        }\n        const result = isValidHandle(event, {\n            handle: closestHandle,\n            connectionMode,\n            fromNodeId: nodeId,\n            fromHandleId: handleId,\n            fromType: isTarget ? 'target' : 'source',\n            isValidConnection,\n            doc,\n            lib,\n            flowId,\n            handleLookup,\n        });\n        handleDomNode = result.handleDomNode;\n        connection = result.connection;\n        isValid = isConnectionValid(!!closestHandle, result.isValid);\n        const newConnection = {\n            // from stays the same\n            ...previousConnection,\n            isValid,\n            to: closestHandle && isValid\n                ? rendererPointToPoint({ x: closestHandle.x, y: closestHandle.y }, transform)\n                : position,\n            toHandle: result.toHandle,\n            toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n            toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null,\n        };\n        // we don't want to trigger an update when the connection\n        // is snapped to the same handle as before\n        if (isValid &&\n            closestHandle &&\n            previousConnection.toHandle &&\n            newConnection.toHandle &&\n            previousConnection.toHandle.type === newConnection.toHandle.type &&\n            previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId &&\n            previousConnection.toHandle.id === newConnection.toHandle.id) {\n            return;\n        }\n        updateConnection(newConnection);\n        previousConnection = newConnection;\n    }\n    function onPointerUp(event) {\n        if ((closestHandle || handleDomNode) && connection && isValid) {\n            onConnect?.(connection);\n        }\n        // it's important to get a fresh reference from the store here\n        // in order to get the latest state of onConnectEnd\n        onConnectEnd?.(event);\n        if (edgeUpdaterType) {\n            onReconnectEnd?.(event);\n        }\n        cancelConnection();\n        cancelAnimationFrame(autoPanId);\n        autoPanStarted = false;\n        isValid = false;\n        connection = null;\n        handleDomNode = null;\n        doc.removeEventListener('mousemove', onPointerMove);\n        doc.removeEventListener('mouseup', onPointerUp);\n        doc.removeEventListener('touchmove', onPointerMove);\n        doc.removeEventListener('touchend', onPointerUp);\n    }\n    doc.addEventListener('mousemove', onPointerMove);\n    doc.addEventListener('mouseup', onPointerUp);\n    doc.addEventListener('touchmove', onPointerMove);\n    doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, { handle, connectionMode, fromNodeId, fromHandleId, fromType, doc, lib, flowId, isValidConnection = alwaysValid, handleLookup, }) {\n    const isTarget = fromType === 'target';\n    const handleDomNode = handle\n        ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`)\n        : null;\n    const { x, y } = getEventPosition(event);\n    const handleBelow = doc.elementFromPoint(x, y);\n    // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n    // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n    const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n    const result = {\n        handleDomNode: handleToCheck,\n        isValid: false,\n        connection: null,\n        toHandle: null,\n    };\n    if (handleToCheck) {\n        const handleType = getHandleType(undefined, handleToCheck);\n        const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n        const handleId = handleToCheck.getAttribute('data-handleid');\n        const connectable = handleToCheck.classList.contains('connectable');\n        const connectableEnd = handleToCheck.classList.contains('connectableend');\n        if (!handleNodeId) {\n            return result;\n        }\n        const connection = {\n            source: isTarget ? handleNodeId : fromNodeId,\n            sourceHandle: isTarget ? handleId : fromHandleId,\n            target: isTarget ? fromNodeId : handleNodeId,\n            targetHandle: isTarget ? fromHandleId : handleId,\n        };\n        result.connection = connection;\n        const isConnectable = connectable && connectableEnd;\n        // in strict mode we don't allow target to target or source to source connections\n        const isValid = isConnectable &&\n            (connectionMode === ConnectionMode.Strict\n                ? (isTarget && handleType === 'source') || (!isTarget && handleType === 'target')\n                : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n        result.isValid = isValid && isValidConnection(connection);\n        const toHandle = handleLookup?.get(`${handleNodeId}-${handleType}-${handleId}`);\n        if (toHandle) {\n            result.toHandle = {\n                ...toHandle,\n            };\n        }\n    }\n    return result;\n}\nconst XYHandle = {\n    onPointerDown,\n    isValid: isValidHandle,\n};\n\nfunction XYMinimap({ domNode, panZoom, getTransform, getViewScale }) {\n    const selection = select(domNode);\n    function update({ translateExtent, width, height, zoomStep = 10, pannable = true, zoomable = true, inversePan = false, }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const zoomHandler = (event) => {\n            const transform = getTransform();\n            if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n                return;\n            }\n            const pinchDelta = -event.sourceEvent.deltaY *\n                (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) *\n                zoomStep;\n            const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n            panZoom.scaleTo(nextZoom);\n        };\n        let panStart = [0, 0];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panStartHandler = (event) => {\n            if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n                panStart = [\n                    event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                    event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n                ];\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panHandler = (event) => {\n            const transform = getTransform();\n            if ((event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove') || !panZoom) {\n                return;\n            }\n            const panCurrent = [\n                event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n            ];\n            const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n            panStart = panCurrent;\n            const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n            const position = {\n                x: transform[0] - panDelta[0] * moveScale,\n                y: transform[1] - panDelta[1] * moveScale,\n            };\n            const extent = [\n                [0, 0],\n                [width, height],\n            ];\n            panZoom.setViewportConstrained({\n                x: position.x,\n                y: position.y,\n                zoom: transform[2],\n            }, extent, translateExtent);\n        };\n        const zoomAndPanHandler = zoom()\n            .on('start', panStartHandler)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom', pannable ? panHandler : null)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom.wheel', zoomable ? zoomHandler : null);\n        selection.call(zoomAndPanHandler, {});\n    }\n    function destroy() {\n        selection.on('zoom', null);\n    }\n    return {\n        update,\n        destroy,\n        pointer,\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = (transform) => ({\n    x: transform.x,\n    y: transform.y,\n    zoom: transform.k,\n});\nconst viewportToTransform = ({ x, y, zoom }) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => { }) => {\n    const hasDuration = typeof duration === 'number' && duration > 0;\n    if (!hasDuration) {\n        onEnd();\n    }\n    return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = (event) => {\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\n\nfunction createPanOnScrollHandler({ zoomPanValues, noWheelClassName, d3Selection, d3Zoom, panOnScrollMode, panOnScrollSpeed, zoomOnPinch, onPanZoomStart, onPanZoom, onPanZoomEnd, }) {\n    return (event) => {\n        if (isWrappedWithClass(event, noWheelClassName)) {\n            return false;\n        }\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        const currentZoom = d3Selection.property('__zoom').k || 1;\n        // macos sets ctrlKey=true for pinch gesture on a trackpad\n        if (event.ctrlKey && zoomOnPinch) {\n            const point = pointer(event);\n            const pinchDelta = wheelDelta(event);\n            const zoom = currentZoom * Math.pow(2, pinchDelta);\n            // @ts-ignore\n            d3Zoom.scaleTo(d3Selection, zoom, point, event);\n            return;\n        }\n        // increase scroll speed in firefox\n        // firefox: deltaMode === 1; chrome: deltaMode === 0\n        const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n        let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n        let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n        // this enables vertical scrolling with shift + scroll on windows\n        if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n            deltaX = event.deltaY * deltaNormalize;\n            deltaY = 0;\n        }\n        d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, \n        // @ts-ignore\n        { internal: true });\n        const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n        clearTimeout(zoomPanValues.panScrollTimeout);\n        // for pan on scroll we need to handle the event calls on our own\n        // we can't use the start, zoom and end events from d3-zoom\n        // because start and move gets called on every scroll event and not once at the beginning\n        if (!zoomPanValues.isPanScrolling) {\n            zoomPanValues.isPanScrolling = true;\n            onPanZoomStart?.(event, nextViewport);\n        }\n        if (zoomPanValues.isPanScrolling) {\n            onPanZoom?.(event, nextViewport);\n            zoomPanValues.panScrollTimeout = setTimeout(() => {\n                onPanZoomEnd?.(event, nextViewport);\n                zoomPanValues.isPanScrolling = false;\n            }, 150);\n        }\n    };\n}\nfunction createZoomOnScrollHandler({ noWheelClassName, preventScrolling, d3ZoomHandler }) {\n    return function (event, d) {\n        // we still want to enable pinch zooming even if preventScrolling is set to false\n        const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n        if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n            return null;\n        }\n        event.preventDefault();\n        d3ZoomHandler.call(this, event, d);\n    };\n}\nfunction createPanZoomStartHandler({ zoomPanValues, onDraggingChange, onPanZoomStart }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        const viewport = transformToViewport(event.transform);\n        // we need to remember it here, because it's always 0 in the \"zoom\" event\n        zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n        zoomPanValues.isZoomingOrPanning = true;\n        zoomPanValues.prevViewport = viewport;\n        if (event.sourceEvent?.type === 'mousedown') {\n            onDraggingChange(true);\n        }\n        if (onPanZoomStart) {\n            onPanZoomStart?.(event.sourceEvent, viewport);\n        }\n    };\n}\nfunction createPanZoomHandler({ zoomPanValues, panOnDrag, onPaneContextMenu, onTransformChange, onPanZoom, }) {\n    return (event) => {\n        zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n        if (!event.sourceEvent?.sync) {\n            onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n        }\n        if (onPanZoom && !event.sourceEvent?.internal) {\n            onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n        }\n    };\n}\nfunction createPanZoomEndHandler({ zoomPanValues, panOnDrag, panOnScroll, onDraggingChange, onPanZoomEnd, onPaneContextMenu, }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        zoomPanValues.isZoomingOrPanning = false;\n        if (onPaneContextMenu &&\n            isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) &&\n            !zoomPanValues.usedRightMouseButton &&\n            event.sourceEvent) {\n            onPaneContextMenu(event.sourceEvent);\n        }\n        zoomPanValues.usedRightMouseButton = false;\n        onDraggingChange(false);\n        if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n            const viewport = transformToViewport(event.transform);\n            zoomPanValues.prevViewport = viewport;\n            clearTimeout(zoomPanValues.timerId);\n            zoomPanValues.timerId = setTimeout(() => {\n                onPanZoomEnd?.(event.sourceEvent, viewport);\n            }, \n            // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n            panOnScroll ? 150 : 0);\n        }\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({ zoomActivationKeyPressed, zoomOnScroll, zoomOnPinch, panOnDrag, panOnScroll, zoomOnDoubleClick, userSelectionActive, noWheelClassName, noPanClassName, lib, }) {\n    return (event) => {\n        const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n        const pinchZoom = zoomOnPinch && event.ctrlKey;\n        if (event.button === 1 &&\n            event.type === 'mousedown' &&\n            (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n            return true;\n        }\n        // if all interactions are disabled, we prevent all zoom events\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n            return false;\n        }\n        // during a selection we prevent all other interactions\n        if (userSelectionActive) {\n            return false;\n        }\n        // if the target element is inside an element with the nowheel class, we prevent zooming\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n            return false;\n        }\n        // if the target element is inside an element with the nopan class, we prevent panning\n        if (isWrappedWithClass(event, noPanClassName) &&\n            (event.type !== 'wheel' || (panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed))) {\n            return false;\n        }\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n            return false;\n        }\n        if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n            event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n            return false;\n        }\n        // when there is no scroll handling enabled, we prevent all wheel events\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n            return false;\n        }\n        // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n            return false;\n        }\n        // if the pane is only movable using allowed clicks\n        if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n            return false;\n        }\n        // We only allow right clicks if pan on drag is set to right click\n        const buttonAllowed = (Array.isArray(panOnDrag) && panOnDrag.includes(event.button)) || !event.button || event.button <= 1;\n        // default filter for d3-zoom\n        return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n    };\n}\n\nfunction XYPanZoom({ domNode, minZoom, maxZoom, paneClickDistance, translateExtent, viewport, onPanZoom, onPanZoomStart, onPanZoomEnd, onTransformChange, onDraggingChange, }) {\n    const zoomPanValues = {\n        isZoomingOrPanning: false,\n        usedRightMouseButton: false,\n        prevViewport: { x: 0, y: 0, zoom: 0 },\n        mouseButton: 0,\n        timerId: undefined,\n        panScrollTimeout: undefined,\n        isPanScrolling: false,\n    };\n    const bbox = domNode.getBoundingClientRect();\n    const d3ZoomInstance = zoom()\n        .clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance)\n        .scaleExtent([minZoom, maxZoom])\n        .translateExtent(translateExtent);\n    const d3Selection = select(domNode).call(d3ZoomInstance);\n    setViewportConstrained({\n        x: viewport.x,\n        y: viewport.y,\n        zoom: clamp(viewport.zoom, minZoom, maxZoom),\n    }, [\n        [0, 0],\n        [bbox.width, bbox.height],\n    ], translateExtent);\n    const d3ZoomHandler = d3Selection.on('wheel.zoom');\n    const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n    d3ZoomInstance.wheelDelta(wheelDelta);\n    function setTransform(transform, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    // public functions\n    function update({ noWheelClassName, noPanClassName, onPaneContextMenu, userSelectionActive, panOnScroll, panOnDrag, panOnScrollMode, panOnScrollSpeed, preventScrolling, zoomOnPinch, zoomOnScroll, zoomOnDoubleClick, zoomActivationKeyPressed, lib, }) {\n        if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n            destroy();\n        }\n        const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n        const wheelHandler = isPanOnScroll\n            ? createPanOnScrollHandler({\n                zoomPanValues,\n                noWheelClassName,\n                d3Selection,\n                d3Zoom: d3ZoomInstance,\n                panOnScrollMode,\n                panOnScrollSpeed,\n                zoomOnPinch,\n                onPanZoomStart,\n                onPanZoom,\n                onPanZoomEnd,\n            })\n            : createZoomOnScrollHandler({\n                noWheelClassName,\n                preventScrolling,\n                d3ZoomHandler,\n            });\n        d3Selection.on('wheel.zoom', wheelHandler, { passive: false });\n        if (!userSelectionActive) {\n            // pan zoom start\n            const startHandler = createPanZoomStartHandler({\n                zoomPanValues,\n                onDraggingChange,\n                onPanZoomStart,\n            });\n            d3ZoomInstance.on('start', startHandler);\n            // pan zoom\n            const panZoomHandler = createPanZoomHandler({\n                zoomPanValues,\n                panOnDrag,\n                onPaneContextMenu: !!onPaneContextMenu,\n                onPanZoom,\n                onTransformChange,\n            });\n            d3ZoomInstance.on('zoom', panZoomHandler);\n            // pan zoom end\n            const panZoomEndHandler = createPanZoomEndHandler({\n                zoomPanValues,\n                panOnDrag,\n                panOnScroll,\n                onPaneContextMenu,\n                onPanZoomEnd,\n                onDraggingChange,\n            });\n            d3ZoomInstance.on('end', panZoomEndHandler);\n        }\n        const filter = createFilter({\n            zoomActivationKeyPressed,\n            panOnDrag,\n            zoomOnScroll,\n            panOnScroll,\n            zoomOnDoubleClick,\n            zoomOnPinch,\n            userSelectionActive,\n            noPanClassName,\n            noWheelClassName,\n            lib,\n        });\n        d3ZoomInstance.filter(filter);\n        // We cannot add zoomOnDoubleClick to the filter above because\n        // double tapping on touch screens circumvents the filter and\n        // dblclick.zoom is fired on the selection directly\n        if (zoomOnDoubleClick) {\n            d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n        }\n        else {\n            d3Selection.on('dblclick.zoom', null);\n        }\n    }\n    function destroy() {\n        d3ZoomInstance.on('zoom', null);\n    }\n    async function setViewportConstrained(viewport, extent, translateExtent) {\n        const nextTransform = viewportToTransform(viewport);\n        const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n        if (contrainedTransform) {\n            await setTransform(contrainedTransform);\n        }\n        return new Promise((resolve) => resolve(contrainedTransform));\n    }\n    async function setViewport(viewport, options) {\n        const nextTransform = viewportToTransform(viewport);\n        await setTransform(nextTransform, options);\n        return new Promise((resolve) => resolve(nextTransform));\n    }\n    function syncViewport(viewport) {\n        if (d3Selection) {\n            const nextTransform = viewportToTransform(viewport);\n            const currentTransform = d3Selection.property('__zoom');\n            if (currentTransform.k !== viewport.zoom ||\n                currentTransform.x !== viewport.x ||\n                currentTransform.y !== viewport.y) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                d3ZoomInstance?.transform(d3Selection, nextTransform, null, { sync: true });\n            }\n        }\n    }\n    function getViewport() {\n        const transform = d3Selection ? zoomTransform(d3Selection.node()) : { x: 0, y: 0, k: 1 };\n        return { x: transform.x, y: transform.y, zoom: transform.k };\n    }\n    function scaleTo(zoom, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function scaleBy(factor, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function setScaleExtent(scaleExtent) {\n        d3ZoomInstance?.scaleExtent(scaleExtent);\n    }\n    function setTranslateExtent(translateExtent) {\n        d3ZoomInstance?.translateExtent(translateExtent);\n    }\n    function setClickDistance(distance) {\n        const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n        d3ZoomInstance?.clickDistance(validDistance);\n    }\n    return {\n        update,\n        destroy,\n        setViewport,\n        setViewportConstrained,\n        getViewport,\n        scaleTo,\n        scaleBy,\n        setScaleExtent,\n        setTranslateExtent,\n        syncViewport,\n        setClickDistance,\n    };\n}\n\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n    ResizeControlVariant[\"Line\"] = \"line\";\n    ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({ width, prevWidth, height, prevHeight, affectsX, affectsY, }) {\n    const deltaWidth = width - prevWidth;\n    const deltaHeight = height - prevHeight;\n    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n    if (deltaWidth && affectsX) {\n        direction[0] = direction[0] * -1;\n    }\n    if (deltaHeight && affectsY) {\n        direction[1] = direction[1] * -1;\n    }\n    return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n    const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n    const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n    const affectsX = controlPosition.includes('left');\n    const affectsY = controlPosition.includes('top');\n    return {\n        isHorizontal,\n        isVertical,\n        affectsX,\n        affectsY,\n    };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n    return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n    return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n    return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n    return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n    let { affectsX, affectsY } = controlDirection;\n    const { isHorizontal, isVertical } = controlDirection;\n    const isDiagonal = isHorizontal && isVertical;\n    const { xSnapped, ySnapped } = pointerPosition;\n    const { minWidth, maxWidth, minHeight, maxHeight } = boundaries;\n    const { x: startX, y: startY, width: startWidth, height: startHeight, aspectRatio } = startValues;\n    let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n    let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n    const newWidth = startWidth + (affectsX ? -distX : distX);\n    const newHeight = startHeight + (affectsY ? -distY : distY);\n    const originOffsetX = -nodeOrigin[0] * startWidth;\n    const originOffsetY = -nodeOrigin[1] * startHeight;\n    // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n    let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n    let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n    // Check if extent is restricting the resize\n    if (extent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n        }\n        else if (!affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n        }\n        if (affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n        }\n        else if (!affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the child extent is restricting the resize\n    if (childExtent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n        }\n        else if (!affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n        }\n        if (affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n        }\n        else if (!affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the aspect ratio resizing of the other side is restricting the resize\n    if (keepAspectRatio) {\n        if (isHorizontal) {\n            // Check if the max dimensions might be restricting the resize\n            const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n            clampX = Math.max(clampX, aspectHeightClamp);\n            // Check if the extent is restricting the resize\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) *\n                            aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n            // Check if the child extent is restricting the resize\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n        }\n        // Do the same thing for vertical resizing\n        if (isVertical) {\n            const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n            clampY = Math.max(clampY, aspectWidthClamp);\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) /\n                            aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n        }\n    }\n    distY = distY + (distY < 0 ? clampY : -clampY);\n    distX = distX + (distX < 0 ? clampX : -clampX);\n    if (keepAspectRatio) {\n        if (isDiagonal) {\n            if (newWidth > newHeight * aspectRatio) {\n                distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n            }\n            else {\n                distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n            }\n        }\n        else {\n            if (isHorizontal) {\n                distY = distX / aspectRatio;\n                affectsY = affectsX;\n            }\n            else {\n                distX = distY * aspectRatio;\n                affectsX = affectsY;\n            }\n        }\n    }\n    const x = affectsX ? startX + distX : startX;\n    const y = affectsY ? startY + distY : startY;\n    return {\n        width: startWidth + (affectsX ? -distX : distX),\n        height: startHeight + (affectsY ? -distY : distY),\n        x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n        y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y,\n    };\n}\n\nconst initPrevValues = { width: 0, height: 0, x: 0, y: 0 };\nconst initStartValues = {\n    ...initPrevValues,\n    pointerX: 0,\n    pointerY: 0,\n    aspectRatio: 1,\n};\nfunction nodeToParentExtent(node) {\n    return [\n        [0, 0],\n        [node.measured.width, node.measured.height],\n    ];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n    const x = parent.position.x + child.position.x;\n    const y = parent.position.y + child.position.y;\n    const width = child.measured.width ?? 0;\n    const height = child.measured.height ?? 0;\n    const originOffsetX = nodeOrigin[0] * width;\n    const originOffsetY = nodeOrigin[1] * height;\n    return [\n        [x - originOffsetX, y - originOffsetY],\n        [x + width - originOffsetX, y + height - originOffsetY],\n    ];\n}\nfunction XYResizer({ domNode, nodeId, getStoreItems, onChange, onEnd }) {\n    const selection = select(domNode);\n    function update({ controlPosition, boundaries, keepAspectRatio, onResizeStart, onResize, onResizeEnd, shouldResize, }) {\n        let prevValues = { ...initPrevValues };\n        let startValues = { ...initStartValues };\n        const controlDirection = getControlDirection(controlPosition);\n        let node = undefined;\n        let childNodes = [];\n        let parentNode = undefined; // Needed to fix expandParent\n        let parentExtent = undefined;\n        let childExtent = undefined;\n        const dragHandler = drag()\n            .on('start', (event) => {\n            const { nodeLookup, transform, snapGrid, snapToGrid, nodeOrigin } = getStoreItems();\n            node = nodeLookup.get(nodeId);\n            if (!node) {\n                return;\n            }\n            const { xSnapped, ySnapped } = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            prevValues = {\n                width: node.measured.width ?? 0,\n                height: node.measured.height ?? 0,\n                x: node.position.x ?? 0,\n                y: node.position.y ?? 0,\n            };\n            startValues = {\n                ...prevValues,\n                pointerX: xSnapped,\n                pointerY: ySnapped,\n                aspectRatio: prevValues.width / prevValues.height,\n            };\n            parentNode = undefined;\n            if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n                parentNode = nodeLookup.get(node.parentId);\n                parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n            }\n            // Collect all child nodes to correct their relative positions when top/left changes\n            // Determine largest minimal extent the parent node is allowed to resize to\n            childNodes = [];\n            childExtent = undefined;\n            for (const [childId, child] of nodeLookup) {\n                if (child.parentId === nodeId) {\n                    childNodes.push({\n                        id: childId,\n                        position: { ...child.position },\n                        extent: child.extent,\n                    });\n                    if (child.extent === 'parent' || child.expandParent) {\n                        const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n                        if (childExtent) {\n                            childExtent = [\n                                [Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])],\n                                [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])],\n                            ];\n                        }\n                        else {\n                            childExtent = extent;\n                        }\n                    }\n                }\n            }\n            onResizeStart?.(event, { ...prevValues });\n        })\n            .on('drag', (event) => {\n            const { transform, snapGrid, snapToGrid, nodeOrigin: storeNodeOrigin } = getStoreItems();\n            const pointerPosition = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            const childChanges = [];\n            if (!node) {\n                return;\n            }\n            const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues;\n            const change = {};\n            const nodeOrigin = node.origin ?? storeNodeOrigin;\n            const { width, height, x, y } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n            const isWidthChange = width !== prevWidth;\n            const isHeightChange = height !== prevHeight;\n            const isXPosChange = x !== prevX && isWidthChange;\n            const isYPosChange = y !== prevY && isHeightChange;\n            if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n                return;\n            }\n            if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n                change.x = isXPosChange ? x : prevValues.x;\n                change.y = isYPosChange ? y : prevValues.y;\n                prevValues.x = change.x;\n                prevValues.y = change.y;\n                // when top/left changes, correct the relative positions of child nodes\n                // so that they stay in the same position\n                if (childNodes.length > 0) {\n                    const xChange = x - prevX;\n                    const yChange = y - prevY;\n                    for (const childNode of childNodes) {\n                        childNode.position = {\n                            x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n                            y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight),\n                        };\n                        childChanges.push(childNode);\n                    }\n                }\n            }\n            if (isWidthChange || isHeightChange) {\n                change.width = isWidthChange ? width : prevValues.width;\n                change.height = isHeightChange ? height : prevValues.height;\n                prevValues.width = change.width;\n                prevValues.height = change.height;\n            }\n            // Fix expandParent when resizing from top/left\n            if (parentNode && node.expandParent) {\n                const xLimit = nodeOrigin[0] * (change.width ?? 0);\n                if (change.x && change.x < xLimit) {\n                    prevValues.x = xLimit;\n                    startValues.x = startValues.x - (change.x - xLimit);\n                }\n                const yLimit = nodeOrigin[1] * (change.height ?? 0);\n                if (change.y && change.y < yLimit) {\n                    prevValues.y = yLimit;\n                    startValues.y = startValues.y - (change.y - yLimit);\n                }\n            }\n            const direction = getResizeDirection({\n                width: prevValues.width,\n                prevWidth,\n                height: prevValues.height,\n                prevHeight,\n                affectsX: controlDirection.affectsX,\n                affectsY: controlDirection.affectsY,\n            });\n            const nextValues = { ...prevValues, direction };\n            const callResize = shouldResize?.(event, nextValues);\n            if (callResize === false) {\n                return;\n            }\n            onResize?.(event, nextValues);\n            onChange(change, childChanges);\n        })\n            .on('end', (event) => {\n            onResizeEnd?.(event, { ...prevValues });\n            onEnd?.();\n        });\n        selection.call(dragHandler);\n    }\n    function destroy() {\n        selection.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}